#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Fragment API
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FragmentService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
from services.fragment.fragment_service import FragmentService


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)


def check_seed_phrase_format(seed_phrase: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ seed phrase"""
    if not seed_phrase:
        print("‚ùå FRAGMENT_SEED_PHRASE –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if seed_phrase == "your_24_words_seed_phrase" or seed_phrase == "your_24_words_seed_phrase_from_ton_v4r2_wallet":
        print("‚ùå FRAGMENT_SEED_PHRASE —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é seed phrase.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    words = seed_phrase.strip().split()
    if len(words) != 24:
        print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç FRAGMENT_SEED_PHRASE: –æ–∂–∏–¥–∞–µ—Ç—Å—è 24 —Å–ª–æ–≤–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(words)}")
        return False
    
    print(f"‚úÖ Seed phrase –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ({len(words)} —Å–ª–æ–≤)")
    return True


def check_fragment_cookies(cookies: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ cookies"""
    if not cookies:
        print("‚ö†Ô∏è  FRAGMENT_COOKIES –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° Cookies –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Fragment API")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if cookies == "your_fragment_cookies" or cookies == "your_fragment_cookies_from_cookie_editor_extension":
        print("‚ùå FRAGMENT_COOKIES —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ cookies.")
        return False
    
    print("‚úÖ Cookies –∑–∞–¥–∞–Ω—ã")
    return True


def check_auto_refresh_setting() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    auto_refresh = os.getenv("FRAGMENT_AUTO_COOKIE_REFRESH", "False").lower() == "true"
    if auto_refresh:
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –≤–∫–ª—é—á–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å FRAGMENT_AUTO_COOKIE_REFRESH=true –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    
    return True


def check_docker_selenium() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker Selenium"""
    try:
        from selenium import webdriver
        
        selenium_host = os.getenv("SELENIUM_HOST", "selenium-chrome")
        selenium_port = os.getenv("SELENIUM_PORT", "4444")
        selenium_url = f"http://{selenium_host}:{selenium_port}/wd/hub"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Docker Selenium
        driver = webdriver.Remote(
            command_executor=selenium_url,
            options=chrome_options
        )
        
        # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        driver.quit()
        print(f"‚úÖ Docker Selenium –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {selenium_url}")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Docker Selenium –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ selenium-chrome —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
        print("üí° –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies")
        return False


def check_environment_variables() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Fragment API...")
    print("-" * 50)
    
    all_checks_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ seed phrase
    seed_phrase = os.getenv("FRAGMENT_SEED_PHRASE", "")
    if not check_seed_phrase_format(seed_phrase):
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cookies
    cookies = os.getenv("FRAGMENT_COOKIES", "")
    if not check_fragment_cookies(cookies):
        # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if not check_auto_refresh_setting():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Selenium
    if not check_docker_selenium():
        # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        pass
    
    print("-" * 50)
    
    if all_checks_passed:
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False


async def check_fragment_api_connectivity() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Fragment API"""
    print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Fragment API...")
    print("-" * 40)
    
    try:
        fragment_service = FragmentService()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ ping...")
        ping_result = await fragment_service.ping()
        if ping_result["status"] == "success":
            print("‚úÖ Fragment API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è  Fragment API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ping_result.get('error', 'Unknown error')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ seed phrase (–µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è)
        if fragment_service.seed_phrase and len(fragment_service.seed_phrase.strip().split()) == 24:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
            balance_result = await fragment_service.get_balance()
            if balance_result["status"] == "success":
                balance_data = balance_result.get("result", {})
                print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {balance_data.get('balance', 'N/A')} {balance_data.get('currency', 'TON')}")
            else:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {balance_result.get('error', 'Unknown error')}")
        else:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π seed phrase")
        
        print("-" * 40)
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Fragment API: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger = setup_logging()
    
    print("üöÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Fragment API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_check_passed = check_environment_variables()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API (–µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä–Ω—ã)
    if env_check_passed:
        await check_fragment_api_connectivity()
    
    print("\nüìã –†–µ–∑—é–º–µ:")
    print("-" * 20)
    
    if env_check_passed:
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        sys.exit(0)
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())