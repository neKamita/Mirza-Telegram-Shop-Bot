"""
Alert Service - —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è—Ö
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
"""

import asyncio
import aiohttp
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timezone
from dataclasses import dataclass
from enum import Enum
from config.settings import settings


class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    INFO = "INFO"
    WARNING = "WARNING" 
    CRITICAL = "CRITICAL"
    EMERGENCY = "EMERGENCY"


@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞"""
    level: AlertLevel
    message: str
    service: str
    timestamp: datetime
    details: Optional[Dict[str, Any]] = None
    resolved: bool = False


class AlertService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""

    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.active_alerts: Dict[str, Alert] = {}
        self.alert_history: List[Alert] = []

    async def send_telegram_alert(self, alert: Alert) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥
        if not settings.telegram_alerts_enabled:
            self.logger.debug("Telegram alerts are disabled, skipping alert")
            return False
            
        if not settings.telegram_token or not settings.telegram_chat_id:
            self.logger.warning("Telegram credentials not configured")
            return False

        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            emoji = self._get_alert_emoji(alert.level)
            message = f"{emoji} *{alert.level.value}* - {alert.service}\n"
            message += f"‚è∞ {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n"
            message += f"üìù {alert.message}\n"

            if alert.details:
                details_str = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in alert.details.items()])
                message += f"\nüîç –î–µ—Ç–∞–ª–∏:\n{details_str}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{settings.telegram_token}/sendMessage"
            payload = {
                "chat_id": settings.telegram_chat_id,
                "text": message,
                "parse_mode": "Markdown",
                "disable_notification": alert.level == AlertLevel.INFO
            }

            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        self.logger.info(f"Alert sent to Telegram: {alert.message}")
                        return True
                    else:
                        self.logger.error(f"Failed to send alert: {response.status}")
                        return False

        except Exception as e:
            self.logger.error(f"Error sending Telegram alert: {e}")
            return False

    def _get_alert_emoji(self, level: AlertLevel) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ emoji –¥–ª—è —É—Ä–æ–≤–Ω—è –∞–ª–µ—Ä—Ç–∞"""
        emojis = {
            AlertLevel.INFO: "‚ÑπÔ∏è",
            AlertLevel.WARNING: "‚ö†Ô∏è",
            AlertLevel.CRITICAL: "üö®",
            AlertLevel.EMERGENCY: "üî¥"
        }
        return emojis.get(level, "üì¢")

    async def create_alert(self, 
                          level: AlertLevel, 
                          message: str, 
                          service: str,
                          details: Optional[Dict[str, Any]] = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        alert_id = f"{service}_{datetime.now(timezone.utc).timestamp()}"
        
        alert = Alert(
            level=level,
            message=message,
            service=service,
            timestamp=datetime.now(timezone.utc),
            details=details
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        self.active_alerts[alert_id] = alert
        self.alert_history.append(alert)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if level in [AlertLevel.WARNING, AlertLevel.CRITICAL, AlertLevel.EMERGENCY]:
            await self.send_telegram_alert(alert)

        self.logger.info(f"Alert created: {alert_id} - {message}")
        return alert_id

    async def resolve_alert(self, alert_id: str, resolution_message: str = "") -> bool:
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        if alert_id not in self.active_alerts:
            return False

        alert = self.active_alerts[alert_id]
        alert.resolved = True
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
        if alert.level in [AlertLevel.CRITICAL, AlertLevel.EMERGENCY]:
            resolution_alert = Alert(
                level=AlertLevel.INFO,
                message=f"Resolved: {alert.message}",
                service=alert.service,
                timestamp=datetime.now(timezone.utc),
                details={"resolution": resolution_message} if resolution_message else None
            )
            await self.send_telegram_alert(resolution_alert)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        del self.active_alerts[alert_id]
        self.logger.info(f"Alert resolved: {alert_id}")
        return True

    def get_active_alerts(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        return [
            {
                "id": alert_id,
                "level": alert.level.value,
                "message": alert.message,
                "service": alert.service,
                "timestamp": alert.timestamp.isoformat(),
                "details": alert.details
            }
            for alert_id, alert in self.active_alerts.items()
        ]

    def get_alert_history(self, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        recent_history = self.alert_history[-limit:] if self.alert_history else []
        return [
            {
                "level": alert.level.value,
                "message": alert.message,
                "service": alert.service,
                "timestamp": alert.timestamp.isoformat(),
                "resolved": alert.resolved,
                "details": alert.details
            }
            for alert in recent_history
        ]

    async def check_and_alert_redis_cluster(self, cluster_info: Dict[str, Any]) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        slots_covered = cluster_info.get("slots_covered", 0)
        total_slots = cluster_info.get("total_slots", 16384)
        
        if slots_covered < total_slots:
            message = f"Redis Cluster slots not fully covered: {slots_covered}/{total_slots}"
            details = {
                "slots_covered": slots_covered,
                "total_slots": total_slots,
                "missing_slots": total_slots - slots_covered
            }
            
            if slots_covered == 0:
                return await self.create_alert(
                    AlertLevel.EMERGENCY, 
                    "Redis Cluster: NO SLOTS COVERED!", 
                    "redis_cluster",
                    details
                )
            elif slots_covered < total_slots * 0.9:  # –ú–µ–Ω–µ–µ 90% –ø–æ–∫—Ä—ã—Ç–∏—è
                return await self.create_alert(
                    AlertLevel.CRITICAL,
                    message,
                    "redis_cluster",
                    details
                )
            else:
                return await self.create_alert(
                    AlertLevel.WARNING,
                    message,
                    "redis_cluster", 
                    details
                )
        return None

    async def check_and_alert_external_service(self, 
                                             service_name: str, 
                                             status: str, 
                                             response_time: float,
                                             error: Optional[str] = None) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        if status == "unhealthy":
            message = f"External service {service_name} is down"
            details = {
                "response_time_ms": response_time,
                "error": error
            }
            
            # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            critical_services = ["telegram_api", "payment_service", "database"]
            if service_name in critical_services:
                return await self.create_alert(
                    AlertLevel.CRITICAL,
                    message,
                    service_name,
                    details
                )
            else:
                return await self.create_alert(
                    AlertLevel.WARNING, 
                    message,
                    service_name,
                    details
                )
        return None

    async def check_and_alert_system_resources(self, resources: Dict[str, Any]) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        alert_ids = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
        cpu_usage = resources.get("cpu", {}).get("usage_percent", 0)
        if cpu_usage > 90:
            alert_ids.append(await self.create_alert(
                AlertLevel.CRITICAL,
                f"High CPU usage: {cpu_usage}%",
                "system_resources",
                {"cpu_usage": cpu_usage}
            ))
        elif cpu_usage > 80:
            alert_ids.append(await self.create_alert(
                AlertLevel.WARNING,
                f"High CPU usage: {cpu_usage}%", 
                "system_resources",
                {"cpu_usage": cpu_usage}
            ))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        memory_usage = resources.get("memory", {}).get("usage_percent", 0)
        if memory_usage > 90:
            alert_ids.append(await self.create_alert(
                AlertLevel.CRITICAL,
                f"High memory usage: {memory_usage}%",
                "system_resources",
                {"memory_usage": memory_usage}
            ))
        elif memory_usage > 80:
            alert_ids.append(await self.create_alert(
                AlertLevel.WARNING,
                f"High memory usage: {memory_usage}%",
                "system_resources", 
                {"memory_usage": memory_usage}
            ))

        return alert_ids


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞
alert_service = AlertService()