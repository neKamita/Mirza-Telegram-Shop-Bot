"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ unit-—Ç–µ—Å—Ç—ã –¥–ª—è PurchaseHandler —Å –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""
import pytest
import asyncio
from unittest.mock import AsyncMock, Mock, patch, MagicMock
from aiogram.types import Message, CallbackQuery, User, Chat, InaccessibleMessage
from aiogram.exceptions import TelegramBadRequest

from handlers.purchase_handler import PurchaseHandler
from handlers.error_handler import PurchaseErrorType
from services.payment.star_purchase_service import StarPurchaseService
from services.balance.balance_service import BalanceService
from repositories.user_repository import UserRepository
from utils.rate_limit_messages import RateLimitMessages


class TestPurchaseHandlerComprehensive:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è PurchaseHandler —Å –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º"""

    @pytest.fixture
    def mock_user(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Å mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        user = Mock(spec=User)
        user.id = 123
        user.username = "test_user"
        user.first_name = "Test"
        user.last_name = "User"
        user.is_bot = False
        return user

    @pytest.fixture
    def mock_message(self, mock_user):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Å mock —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        message = Mock(spec=Message)
        message.from_user = mock_user
        message.text = "100"
        message.chat = Mock()
        message.chat.id = 456
        message.answer = AsyncMock()
        message.edit_text = AsyncMock()
        return message

    @pytest.fixture
    def mock_callback(self, mock_user):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Å mock callback"""
        callback = Mock(spec=CallbackQuery)
        callback.from_user = mock_user
        callback.data = "buy_100"
        callback.message = Mock(spec=Message)
        callback.message.from_user = mock_user
        callback.message.text = "Test message"
        callback.message.chat = Mock()
        callback.message.chat.id = 456
        callback.message.answer = AsyncMock()
        callback.message.edit_text = AsyncMock()
        callback.answer = AsyncMock()
        return callback

    @pytest.fixture
    def mock_services(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Å mock —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        user_repo = Mock(spec=UserRepository)
        star_purchase_service = Mock(spec=StarPurchaseService)
        balance_service = Mock(spec=BalanceService)
        error_handler = Mock()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è user_repository
        user_repo.user_exists = AsyncMock(return_value=True)
        user_repo.get_user = AsyncMock(return_value={
            "id": 123,
            "username": "test_user",
            "balance": 100.0
        })

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è star_purchase_service
        star_purchase_service.create_star_purchase = AsyncMock(return_value={
            "status": "success",
            "stars_count": 100,
            "old_balance": 100.0,
            "new_balance": 90.0,
            "message": "‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ 100 –∑–≤–µ–∑–¥"
        })

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è balance_service
        balance_service.get_user_balance = AsyncMock(return_value={
            "balance": 100.0,
            "currency": "TON",
            "source": "database"
        })

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è error_handler
        error_handler.handle_purchase_error = AsyncMock(return_value=PurchaseErrorType.NETWORK_ERROR)
        error_handler.show_error_with_suggestions = AsyncMock()
        error_handler.categorize_error = Mock(return_value=PurchaseErrorType.NETWORK_ERROR)
        error_handler._handle_insufficient_balance_error = AsyncMock()

        return {
            'user_repository': user_repo,
            'star_purchase_service': star_purchase_service,
            'balance_service': balance_service,
            'error_handler': error_handler
        }

    @pytest.fixture
    def purchase_handler(self, mock_services):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º PurchaseHandler"""
        handler = PurchaseHandler(
            user_repository=mock_services['user_repository'],
            payment_service=Mock(),
            balance_service=mock_services['balance_service'],
            star_purchase_service=mock_services['star_purchase_service']
        )
        handler.error_handler = mock_services['error_handler']
        handler.logger = Mock()
        return handler

    @pytest.mark.asyncio
    async def test_format_payment_status(self, purchase_handler):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        statuses = ["pending", "paid", "failed", "expired", "cancelled", "processing", "unknown"]
        
        for status in statuses:
            result = purchase_handler._format_payment_status(status)
            assert isinstance(result, str)
            assert any(emoji in result for emoji in ["‚è≥", "‚úÖ", "‚ùå", "‚ö™", "üîÑ", "‚ùì"])

    @pytest.mark.asyncio
    async def test_show_buy_stars_menu_card(self, purchase_handler, mock_callback):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –∫–∞—Ä—Ç–æ–π"""
        bot = Mock()
        
        await purchase_handler._show_buy_stars_menu(mock_callback, bot, "card")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        assert "–∫–∞—Ä—Ç–æ–π/–∫–æ—à–µ–ª—å–∫–æ–º" in mock_callback.message.edit_text.call_args[0][0].lower()

    @pytest.mark.asyncio
    async def test_show_buy_stars_menu_balance(self, purchase_handler, mock_callback):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        bot = Mock()
        
        await purchase_handler._show_buy_stars_menu(mock_callback, bot, "balance")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        assert "—Å –±–∞–ª–∞–Ω—Å–∞" in mock_callback.message.edit_text.call_args[0][0].lower()

    @pytest.mark.asyncio
    async def test_show_buy_stars_menu_fragment(self, purchase_handler, mock_callback):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment"""
        bot = Mock()
        
        await purchase_handler._show_buy_stars_menu(mock_callback, bot, "fragment")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        assert "—á–µ—Ä–µ–∑ fragment" in mock_callback.message.edit_text.call_args[0][0].lower()

    @pytest.mark.asyncio
    async def test_show_buy_stars_menu_inaccessible_message(self, purchase_handler, mock_callback):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        mock_callback.message = Mock(spec=InaccessibleMessage)
        bot = Mock()
        
        await purchase_handler._show_buy_stars_menu(mock_callback, bot, "card")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ alert –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
        mock_callback.answer.assert_called_with("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

    @pytest.mark.asyncio
    async def test_show_buy_stars_menu_exception(self, purchase_handler, mock_callback):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º"""
        mock_callback.message.edit_text = AsyncMock(side_effect=Exception("Edit error"))
        bot = Mock()
        
        await purchase_handler._show_buy_stars_menu(mock_callback, bot, "card")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ alert –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
        mock_callback.answer.assert_called_with("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

    @pytest.mark.asyncio
    async def test_buy_stars_preset_success(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏È¢ÑËÆæ –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥ - —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        bot = Mock()
        
        # –ü–∞—Ç—á–∏–º safe_execute, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω
        with patch.object(purchase_handler, 'safe_execute', AsyncMock()) as mock_safe_execute:
            await purchase_handler.buy_stars_preset(mock_message, bot, 100)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ safe_execute –±—ã–ª –≤—ã–∑–≤–∞–Ω
            mock_safe_execute.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ create_star_purchase –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è –Ω–∞–ø—Ä—è–º—É—é (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ safe_execute)
            # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ impl –º–µ—Ç–æ–¥–∞, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ buy_stars_preset

    @pytest.mark.asyncio
    async def test_buy_stars_preset_impl_success(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏È¢ÑËÆæ –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥ - —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        bot = Mock()
        
        await purchase_handler._buy_stars_preset_impl(mock_message, bot, 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_services['star_purchase_service'].create_star_purchase.assert_called_once_with(
            123, 100, purchase_type="balance"
        )
        mock_message.answer.assert_called()

    @pytest.mark.asyncio
    async def test_buy_stars_preset_impl_insufficient_balance(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏È¢ÑËÆæ –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞"""
        mock_services['star_purchase_service'].create_star_purchase = AsyncMock(return_value={
            "status": "failed",
            "error": "Insufficient balance",
            "current_balance": 50.0,
            "required_amount": 100
        })
        
        bot = Mock()
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ —É purchase_handler
        with patch.object(purchase_handler, '_handle_insufficient_balance_error', AsyncMock()) as mock_handle_error:
            await purchase_handler._buy_stars_preset_impl(mock_message, bot, 100)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            mock_handle_error.assert_called_once()

    @pytest.mark.asyncio
    async def test_buy_stars_preset_impl_failed(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏È¢ÑËÆæ –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥ - –æ—à–∏–±–∫–∞"""
        mock_services['star_purchase_service'].create_star_purchase = AsyncMock(return_value={
            "status": "failed",
            "error": "Service error"
        })
        
        bot = Mock()
        
        await purchase_handler._buy_stars_preset_impl(mock_message, bot, 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ error_handler –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_services['error_handler'].handle_purchase_error.assert_called_once()
        mock_services['error_handler'].show_error_with_suggestions.assert_called_once()

    @pytest.mark.asyncio
    async def test_buy_stars_preset_impl_exception(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏È¢ÑËÆæ –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥ - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"""
        mock_services['star_purchase_service'].create_star_purchase = AsyncMock(
            side_effect=Exception("Unexpected error")
        )
        
        bot = Mock()
        
        await purchase_handler._buy_stars_preset_impl(mock_message, bot, 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ error_handler –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_services['error_handler'].handle_purchase_error.assert_called_once()
        mock_services['error_handler'].show_error_with_suggestions.assert_called_once()

    @pytest.mark.asyncio
    async def test_buy_stars_custom_success(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ - —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        bot = Mock()
        
        # –ü–∞—Ç—á–∏–º safe_execute, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω
        with patch.object(purchase_handler, 'safe_execute', AsyncMock()) as mock_safe_execute:
            await purchase_handler.buy_stars_custom(mock_message, bot, 100)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ safe_execute –±—ã–ª –≤—ã–∑–≤–∞–Ω
            mock_safe_execute.assert_called_once()
            # create_star_purchase –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ impl –º–µ—Ç–æ–¥–∞, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é

    @pytest.mark.asyncio
    async def test_buy_stars_with_balance_success(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞ - —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        bot = Mock()
        
        # –ü–∞—Ç—á–∏–º safe_execute, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω
        with patch.object(purchase_handler, 'safe_execute', AsyncMock()) as mock_safe_execute:
            await purchase_handler.buy_stars_with_balance(mock_message, bot, 100)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ safe_execute –±—ã–ª –≤—ã–∑–≤–∞–Ω
            mock_safe_execute.assert_called_once()
            # create_star_purchase –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ impl –º–µ—Ç–æ–¥–∞, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é

    @pytest.mark.asyncio
    async def test_buy_stars_with_fragment_success(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment - —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        bot = Mock()
        
        # –ü–∞—Ç—á–∏–º safe_execute, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω
        with patch.object(purchase_handler, 'safe_execute', AsyncMock()) as mock_safe_execute:
            await purchase_handler.buy_stars_with_fragment(mock_message, bot, 100)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ safe_execute –±—ã–ª –≤—ã–∑–≤–∞–Ω
            mock_safe_execute.assert_called_once()
            # create_star_purchase –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ impl –º–µ—Ç–æ–¥–∞, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é

    @pytest.mark.asyncio
    async def test_buy_stars_with_balance_impl_success(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞ - —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        bot = Mock()
        
        await purchase_handler._buy_stars_with_balance_impl(mock_message, bot, 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_services['star_purchase_service'].create_star_purchase.assert_called_once_with(
            user_id=123, amount=100, purchase_type="balance"
        )
        mock_message.answer.assert_called()

    @pytest.mark.asyncio
    async def test_buy_stars_with_balance_impl_failed(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞ - –æ—à–∏–±–∫–∞"""
        mock_services['star_purchase_service'].create_star_purchase = AsyncMock(return_value={
            "status": "failed",
            "error": "Service error"
        })
        
        bot = Mock()
        
        await purchase_handler._buy_stars_with_balance_impl(mock_message, bot, 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ error_handler –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_services['error_handler'].handle_purchase_error.assert_called_once()
        mock_services['error_handler'].show_error_with_suggestions.assert_called_once()

    @pytest.mark.asyncio
    async def test_buy_stars_with_fragment_impl_success(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment - —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        mock_services['star_purchase_service'].create_star_purchase = AsyncMock(return_value={
            "status": "success",
            "stars_count": 100,
            "result": {"status": "completed"}
        })
        
        bot = Mock()
        
        await purchase_handler._buy_stars_with_fragment_impl(mock_message, bot, 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_services['star_purchase_service'].create_star_purchase.assert_called_once_with(
            user_id=123, amount=100, purchase_type="fragment"
        )
        mock_message.answer.assert_called()

    @pytest.mark.asyncio
    async def test_buy_stars_with_fragment_impl_failed(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment - –æ—à–∏–±–∫–∞"""
        mock_services['star_purchase_service'].create_star_purchase = AsyncMock(return_value={
            "status": "failed",
            "error": "Fragment API error"
        })
        
        bot = Mock()
        
        await purchase_handler._buy_stars_with_fragment_impl(mock_message, bot, 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ error_handler –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_services['error_handler'].handle_purchase_error.assert_called_once()
        mock_services['error_handler'].show_error_with_suggestions.assert_called_once()

    @pytest.mark.asyncio
    async def test_handle_message_stars_command_valid(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–µ–∑–¥"""
        # –¢–ï–ö–£–©–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ú–ï–ï–¢ –õ–û–ì–ò–ß–ï–°–ö–£–Æ –û–®–ò–ë–ö–£:
        # –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç "–∑–≤–µ–∑–¥" –∏–ª–∏ "stars" –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–æ –∑–∞—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç .isdigit()
        # –≠—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É —Ç–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–∑–æ–≤–∞
        mock_message.text = "100"
        bot = Mock()
        
        # –ü–∞—Ç—á–∏–º buy_stars_custom, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω
        with patch.object(purchase_handler, 'buy_stars_custom', AsyncMock()) as mock_buy_stars_custom:
            await purchase_handler.handle_message(mock_message, bot)
            
            # TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ purchase_handler.py
            # –°–µ–π—á–∞—Å —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑-–∑–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
            # mock_buy_stars_custom.assert_called_once_with(mock_message, bot, 100)
            # create_star_purchase –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ safe_execute
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            mock_message.answer.assert_called()

    @pytest.mark.asyncio
    async def test_handle_message_stars_command_invalid(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–µ–∑–¥"""
        # –¢–ï–ö–£–©–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ú–ï–ï–¢ –õ–û–ì–ò–ß–ï–°–ö–£–Æ –û–®–ò–ë–ö–£:
        # –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç "–∑–≤–µ–∑–¥" –∏–ª–∏ "stars" –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–æ –∑–∞—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç .isdigit()
        # –≠—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É –¥–ª—è "0" —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Ç–∫–∞ else
        mock_message.text = "0"
        bot = Mock()
        
        await purchase_handler.handle_message(mock_message, bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_message.answer.assert_called_once()
        assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" in mock_message.answer.call_args[0][0]

    @pytest.mark.asyncio
    async def test_handle_message_stars_command_too_large(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–µ–∑–¥"""
        # –¢–ï–ö–£–©–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ú–ï–ï–¢ –õ–û–ì–ò–ß–ï–°–ö–£–Æ –û–®–ò–ë–ö–£:
        # –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç "–∑–≤–µ–∑–¥" –∏–ª–∏ "stars" –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–æ –∑–∞—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç .isdigit()
        # –≠—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É –¥–ª—è "20000" —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Ç–∫–∞ else
        mock_message.text = "20000"
        bot = Mock()
        
        await purchase_handler.handle_message(mock_message, bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_message.answer.assert_called_once()
        assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" in mock_message.answer.call_args[0][0]

    @pytest.mark.asyncio
    async def test_handle_message_unknown_command(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        mock_message.text = "unknown command"
        bot = Mock()
        
        await purchase_handler.handle_message(mock_message, bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_message.answer.assert_called_once()
        assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" in mock_message.answer.call_args[0][0]

    @pytest.mark.asyncio
    async def test_handle_callback_buy_stars(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
        mock_callback.data = "buy_stars"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            await purchase_handler.handle_callback(mock_callback, bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
            mock_callback.message.edit_text.assert_called_once()
            assert "–∫–∞—Ä—Ç–æ–π/–∫–æ—à–µ–ª—å–∫–æ–º" in mock_callback.message.edit_text.call_args[0][0].lower()

    @pytest.mark.asyncio
    async def test_handle_callback_buy_stars_balance(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        mock_callback.data = "buy_stars_balance"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            await purchase_handler.handle_callback(mock_callback, bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
            mock_callback.message.edit_text.assert_called_once()
            assert "—Å –±–∞–ª–∞–Ω—Å–∞" in mock_callback.message.edit_text.call_args[0][0].lower()

    @pytest.mark.asyncio
    async def test_handle_callback_buy_stars_fragment(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment"""
        mock_callback.data = "buy_stars_fragment"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            await purchase_handler.handle_callback(mock_callback, bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
            mock_callback.message.edit_text.assert_called_once()
            assert "—á–µ—Ä–µ–∑ fragment" in mock_callback.message.edit_text.call_args[0][0].lower()

    @pytest.mark.asyncio
    async def test_handle_callback_buy_preset(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø–æ–∫—É–ø–∫–∏È¢ÑËÆæ –ø–∞–∫–µ—Ç–∞"""
        mock_callback.data = "buy_100"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            # –ü–∞—Ç—á–∏–º buy_stars_preset, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω
            with patch.object(purchase_handler, 'buy_stars_preset', AsyncMock()) as mock_buy_stars_preset:
                await purchase_handler.handle_callback(mock_callback, bot)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ buy_stars_preset –±—ã–ª –≤—ã–∑–≤–∞–Ω
                mock_buy_stars_preset.assert_called_once_with(mock_callback, bot, 100)
                # create_star_purchase –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ safe_execute

    @pytest.mark.asyncio
    async def test_handle_callback_buy_balance(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø–æ–∫—É–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞"""
        mock_callback.data = "buy_100_balance"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            # –ü–∞—Ç—á–∏–º buy_stars_with_balance, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω
            with patch.object(purchase_handler, 'buy_stars_with_balance', AsyncMock()) as mock_buy_stars_with_balance:
                await purchase_handler.handle_callback(mock_callback, bot)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ buy_stars_with_balance –±—ã–ª –≤—ã–∑–≤–∞–Ω
                mock_buy_stars_with_balance.assert_called_once_with(mock_callback, bot, 100)
                # create_star_purchase –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ safe_execute

    @pytest.mark.asyncio
    async def test_handle_callback_buy_fragment(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ Fragment"""
        mock_callback.data = "buy_100_fragment"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            # –ü–∞—Ç—á–∏–º buy_stars_with_fragment, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –±—ã–ª –≤—ã–∑–≤–∞–Ω
            with patch.object(purchase_handler, 'buy_stars_with_fragment', AsyncMock()) as mock_buy_stars_with_fragment:
                await purchase_handler.handle_callback(mock_callback, bot)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ buy_stars_with_fragment –±—ã–ª –≤—ã–∑–≤–∞–Ω
                mock_buy_stars_with_fragment.assert_called_once_with(mock_callback, bot, 100)
                # create_star_purchase –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ safe_execute

    @pytest.mark.asyncio
    async def test_handle_callback_check_payment(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        mock_callback.data = "check_payment_test_uuid"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            await purchase_handler.handle_callback(mock_callback, bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ alert –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
            mock_callback.answer.assert_called_with("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ test_uuid")

    @pytest.mark.asyncio
    async def test_handle_callback_back_to_buy_stars(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫"""
        mock_callback.data = "back_to_buy_stars"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            await purchase_handler.handle_callback(mock_callback, bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
            mock_callback.message.edit_text.assert_called_once()
            assert "–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã" in mock_callback.message.edit_text.call_args[0][0].lower()

    @pytest.mark.asyncio
    async def test_handle_callback_unknown_action(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback –¥–µ–π—Å—Ç–≤–∏—è"""
        mock_callback.data = "unknown_action"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            await purchase_handler.handle_callback(mock_callback, bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ alert –æ–± –æ—à–∏–±–∫–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
            mock_callback.answer.assert_called()
            assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" in mock_callback.answer.call_args[0][0]

    @pytest.mark.asyncio
    async def test_handle_insufficient_balance_error(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        user_id = 123
        required_amount = 100
        current_balance = 50.0
        required_balance = 100.0
        
        await purchase_handler._handle_insufficient_balance_error(
            mock_message, user_id, required_amount, current_balance, required_balance
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_message.answer.assert_called_once()
        assert "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in mock_message.answer.call_args[0][0].lower()

    @pytest.mark.asyncio
    async def test_show_rate_limit_message(self, purchase_handler, mock_message):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ rate limit"""
        with patch.object(purchase_handler, 'get_rate_limit_remaining_time', AsyncMock(return_value=30)):
            with patch.object(RateLimitMessages, 'get_rate_limit_message', return_value="Rate limit message"):
                await purchase_handler._show_rate_limit_message(mock_message, "operation")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                mock_message.answer.assert_called_with("Rate limit message", parse_mode="HTML")

    # –¢–µ—Å—Ç—ã –¥–ª—è edge cases –∏ boundary conditions
    @pytest.mark.asyncio
    async def test_buy_stars_different_amounts(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏"""
        test_amounts = [10, 50, 100, 250, 500, 1000]
        bot = Mock()
        
        for amount in test_amounts:
            mock_services['star_purchase_service'].create_star_purchase.reset_mock()
            mock_message.answer.reset_mock()
            
            await purchase_handler._buy_stars_preset_impl(mock_message, bot, amount)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            mock_services['star_purchase_service'].create_star_purchase.assert_called_once_with(
                123, amount, purchase_type="balance"
            )
            mock_message.answer.assert_called()

    @pytest.mark.asyncio
    async def test_message_without_user_info(self, purchase_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        message = Mock(spec=Message)
        message.from_user = None
        message.text = "100"
        message.answer = AsyncMock()  # –î–µ–ª–∞–µ–º answer –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
        bot = Mock()
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        await purchase_handler.handle_message(message, bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã)
        message.answer.assert_called_once()
        
    @pytest.mark.asyncio
    async def test_callback_without_user_info(self, purchase_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        callback = Mock(spec=CallbackQuery)
        callback.from_user = None
        callback.data = "buy_100"
        callback.answer = AsyncMock()  # –î–µ–ª–∞–µ–º answer –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
        bot = Mock()
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        await purchase_handler.handle_callback(callback, bot)

    @pytest.mark.asyncio
    async def test_callback_with_inaccessible_message(self, purchase_handler, mock_callback):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        mock_callback.message = Mock(spec=InaccessibleMessage)
        mock_callback.data = "buy_stars"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=True)):
            await purchase_handler.handle_callback(mock_callback, bot)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ alert –æ–± –æ—à–∏–±–∫–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
            mock_callback.answer.assert_called()

    @pytest.mark.asyncio
    async def test_rate_limit_exceeded(self, purchase_handler, mock_callback):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ rate limit"""
        mock_callback.data = "buy_stars"
        bot = Mock()
        
        with patch.object(purchase_handler, 'check_rate_limit', AsyncMock(return_value=False)):
            with patch.object(purchase_handler, '_show_rate_limit_message', AsyncMock()):
                await purchase_handler.handle_callback(mock_callback, bot)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ rate limit –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
                purchase_handler._show_rate_limit_message.assert_called_once()

    @pytest.mark.asyncio
    async def test_purchase_different_payment_methods(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç–∞"""
        payment_methods = ["balance", "fragment"]
        bot = Mock()
        
        for method in payment_methods:
            mock_services['star_purchase_service'].create_star_purchase.reset_mock()
            mock_message.answer.reset_mock()
            
            if method == "balance":
                await purchase_handler._buy_stars_with_balance_impl(mock_message, bot, 100)
            elif method == "fragment":
                await purchase_handler._buy_stars_with_fragment_impl(mock_message, bot, 100)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            if method == "balance":
                mock_services['star_purchase_service'].create_star_purchase.assert_called_once_with(
                    user_id=123, amount=100, purchase_type="balance"
                )
            else:
                mock_services['star_purchase_service'].create_star_purchase.assert_called_once_with(
                    user_id=123, amount=100, purchase_type="fragment"
                )
            mock_message.answer.assert_called()

    @pytest.mark.asyncio
    async def test_purchase_error_types(self, purchase_handler, mock_message, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –ø–æ–∫—É–ø–∫–∏"""
        error_types = [
            ("Insufficient balance", PurchaseErrorType.INSUFFICIENT_BALANCE),
            ("Network error", PurchaseErrorType.NETWORK_ERROR),
            ("Payment system error", PurchaseErrorType.PAYMENT_SYSTEM_ERROR),
            ("Validation error", PurchaseErrorType.VALIDATION_ERROR),
            ("Unknown error", PurchaseErrorType.UNKNOWN_ERROR)
        ]
        bot = Mock()
        
        for error_msg, expected_type in error_types:
            mock_services['star_purchase_service'].create_star_purchase.reset_mock()
            mock_services['error_handler'].handle_purchase_error.reset_mock()
            mock_services['error_handler'].show_error_with_suggestions.reset_mock()
            
            mock_services['star_purchase_service'].create_star_purchase = AsyncMock(return_value={
                "status": "failed",
                "error": error_msg
            })
            
            mock_services['error_handler'].handle_purchase_error = AsyncMock(return_value=expected_type)
            
            await purchase_handler._buy_stars_preset_impl(mock_message, bot, 100)
            
            # –î–ª—è "Insufficient balance" —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç handle_purchase_error
            if error_msg == "Insufficient balance":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
                # handle_purchase_error –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏
                mock_services['error_handler'].handle_purchase_error.assert_not_called()
                # –î–ª—è "Insufficient balance" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è _handle_insufficient_balance_error,
                # –∫–æ—Ç–æ—Ä—ã–π –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç show_error_with_suggestions, –∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –ü–æ—ç—Ç–æ–º—É show_error_with_suggestions –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
                mock_services['error_handler'].show_error_with_suggestions.assert_not_called()
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ error_handler –±—ã–ª –≤—ã–∑–≤–∞–Ω
                mock_services['error_handler'].handle_purchase_error.assert_called_once()
                mock_services['error_handler'].show_error_with_suggestions.assert_called_once()

    @pytest.mark.asyncio
    async def test_telegram_bad_request_handling(self, purchase_handler, mock_callback, mock_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ TelegramBadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        mock_services['star_purchase_service'].create_star_purchase = AsyncMock(return_value={
            "status": "success",
            "stars_count": 100,
            "old_balance": 100.0,
            "new_balance": 90.0
        })
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        mock_callback.message.edit_text = AsyncMock(side_effect=Exception("Message not modified"))
        bot = Mock()
        
        await purchase_handler._buy_stars_preset_impl(mock_callback, bot, 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç
        mock_callback.answer.assert_called()

if __name__ == "__main__":
    pytest.main([__file__, "-v"])