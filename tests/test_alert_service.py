"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è AlertService —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
"""

import asyncio
import pytest
from unittest.mock import AsyncMock, patch, MagicMock
from datetime import datetime, timezone
from services.system.alert_service import AlertService, AlertLevel, Alert
from config.settings import settings


class TestAlertService:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞"""

    @pytest.fixture
    def alert_service(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AlertService"""
        service = AlertService()
        service.active_alerts.clear()
        service.alert_history.clear()
        return service

    @pytest.mark.asyncio
    async def test_create_alert_with_different_levels(self, alert_service):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
        levels_to_test = [
            (AlertLevel.INFO, "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            (AlertLevel.WARNING, "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"),
            (AlertLevel.CRITICAL, "–¢–µ—Å—Ç–æ–≤–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"),
            (AlertLevel.EMERGENCY, "–¢–µ—Å—Ç–æ–≤–∞—è –∞–≤–∞—Ä–∏–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è")
        ]

        for level, message in levels_to_test:
            alert_id = await alert_service.create_alert(
                level=level,
                message=message,
                service="test_service",
                details={"test_key": "test_value"}
            )

            assert alert_id is not None
            assert alert_id.startswith("test_service_")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é
            assert len(alert_service.alert_history) > 0
            last_alert = alert_service.alert_history[-1]
            assert last_alert.level == level
            assert last_alert.message == message
            assert last_alert.service == "test_service"

    @pytest.mark.asyncio
    async def test_alert_message_formatting(self, alert_service):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç
        test_alert = Alert(
            level=AlertLevel.CRITICAL,
            message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏",
            service="test_service",
            timestamp=datetime.now(timezone.utc),
            details={
                "error_code": "500",
                "endpoint": "/api/test",
                "response_time": "2.5s"
            }
        )

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        emoji = alert_service._get_alert_emoji(test_alert.level)
        expected_emoji = "üö®"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º emoji –º–∞–ø–ø–∏–Ω–≥
        assert emoji == expected_emoji
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        # (—ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥, –Ω–æ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        emoji_map = alert_service._get_alert_emoji(test_alert.level)
        assert emoji_map == "üö®"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        with patch('config.settings.settings.telegram_alerts_enabled', False):
            alert_id = await alert_service.create_alert(
                level=AlertLevel.INFO,
                message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ INFO",
                service="test_service"
            )
            assert alert_id is not None
            assert alert_id.startswith("test_service_")

    @pytest.mark.asyncio
    async def test_telegram_send_failure_handling(self, alert_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram"""
        test_alert = Alert(
            level=AlertLevel.WARNING,
            message="–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
            service="test_service",
            timestamp=datetime.now(timezone.utc)
        )

        # –ú–æ–∫–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        with patch('aiohttp.ClientSession.post', new_callable=AsyncMock) as mock_post:
            mock_post.return_value.__aenter__.return_value.status = 403  # Forbidden
            
            result = await alert_service.send_telegram_alert(test_alert)
            assert result is False

        # –ú–æ–∫–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        with patch('aiohttp.ClientSession.post', side_effect=Exception("Connection error")):
            result = await alert_service.send_telegram_alert(test_alert)
            assert result is False

    @pytest.mark.asyncio
    async def test_alert_resolution(self, alert_service):
        """–¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
        alert_id = await alert_service.create_alert(
            level=AlertLevel.CRITICAL,
            message="–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
            service="test_service"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–µ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω
        assert alert_id in alert_service.active_alerts
        assert not alert_service.active_alerts[alert_id].resolved

        # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–ª–µ—Ä—Ç
        result = await alert_service.resolve_alert(alert_id, "–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞")
        assert result is True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        assert alert_id not in alert_service.active_alerts
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–µ—Ä—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ resolved –≤ –∏—Å—Ç–æ—Ä–∏–∏
        resolved_alerts = [a for a in alert_service.alert_history if a.resolved]
        assert len(resolved_alerts) > 0

    @pytest.mark.asyncio
    async def test_redis_cluster_alerting(self, alert_service):
        """–¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –¥–ª—è Redis Cluster"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–ª–æ—Ç–æ–≤
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –Ω–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Å–ª–æ—Ç–æ–≤
        cluster_info = {"slots_covered": 0, "total_slots": 16384}
        alert_id = await alert_service.check_and_alert_redis_cluster(cluster_info)
        assert alert_id is not None
        assert alert_service.alert_history[-1].level == AlertLevel.EMERGENCY

        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ)
        cluster_info = {"slots_covered": 10000, "total_slots": 16384}
        alert_id = await alert_service.check_and_alert_redis_cluster(cluster_info)
        assert alert_id is not None
        assert alert_service.alert_history[-1].level == AlertLevel.CRITICAL

        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
        cluster_info = {"slots_covered": 15000, "total_slots": 16384}
        alert_id = await alert_service.check_and_alert_redis_cluster(cluster_info)
        assert alert_id is not None
        assert alert_service.alert_history[-1].level == AlertLevel.WARNING

        # –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ - –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        cluster_info = {"slots_covered": 16384, "total_slots": 16384}
        alert_id = await alert_service.check_and_alert_redis_cluster(cluster_info)
        assert alert_id is None

    @pytest.mark.asyncio
    async def test_external_service_alerting(self, alert_service):
        """–¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        alert_id = await alert_service.check_and_alert_external_service(
            "telegram_api", "unhealthy", 5000, "Connection timeout"
        )
        assert alert_id is not None
        assert alert_service.alert_history[-1].level == AlertLevel.CRITICAL

        # –ù–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        alert_id = await alert_service.check_and_alert_external_service(
            "fragment_api", "unhealthy", 3000, "Timeout"
        )
        assert alert_id is not None
        assert alert_service.alert_history[-1].level == AlertLevel.WARNING

        # –°–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤ - –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        alert_id = await alert_service.check_and_alert_external_service(
            "telegram_api", "healthy", 100, None
        )
        assert alert_id is None

    @pytest.mark.asyncio
    async def test_system_resources_alerting(self, alert_service):
        """–¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        # –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
        resources = {
            "cpu": {"usage_percent": 95},
            "memory": {"usage_percent": 70}
        }
        alert_ids = await alert_service.check_and_alert_system_resources(resources)
        assert len(alert_ids) == 1
        assert alert_service.alert_history[-1].level == AlertLevel.CRITICAL

        # –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        resources = {
            "cpu": {"usage_percent": 75},
            "memory": {"usage_percent": 92}
        }
        alert_ids = await alert_service.check_and_alert_system_resources(resources)
        assert len(alert_ids) == 1
        assert alert_service.alert_history[-1].level == AlertLevel.CRITICAL

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è CPU
        resources = {
            "cpu": {"usage_percent": 85},
            "memory": {"usage_percent": 65}
        }
        alert_ids = await alert_service.check_and_alert_system_resources(resources)
        assert len(alert_ids) == 1
        assert alert_service.alert_history[-1].level == AlertLevel.WARNING

    def test_alert_emoji_mapping(self, alert_service):
        """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ emoji –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∞–ª–µ—Ä—Ç–æ–≤"""
        emoji_map = {
            AlertLevel.INFO: "‚ÑπÔ∏è",
            AlertLevel.WARNING: "‚ö†Ô∏è", 
            AlertLevel.CRITICAL: "üö®",
            AlertLevel.EMERGENCY: "üî¥"
        }

        for level, expected_emoji in emoji_map.items():
            emoji = alert_service._get_alert_emoji(level)
            assert emoji == expected_emoji

        # –¢–µ—Å—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        class FakeLevel:
            value = "UNKNOWN"
        
        emoji = alert_service._get_alert_emoji(FakeLevel())
        assert emoji == "üì¢"  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π emoji


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é
    import sys
    import subprocess
    
    result = subprocess.run([sys.executable, "-m", "pytest", __file__, "-v"])
    sys.exit(result.returncode)