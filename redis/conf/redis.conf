# Redis configuration for Telegram Bot cluster

# Network settings
bind 0.0.0.0
tcp-keepalive 300
timeout 0
tcp-backlog 511

# General settings
daemonize no
pidfile /var/run/redis_6379.pid
loglevel notice
logfile ""
databases 16
always-show-logo yes

# Security settings
# Пароль для аутентификации клиентов
requirepass root123
# Пароль для аутентификации между нодами (для репликации и кластерных операций)
masterauth root123

# Replication settings - оптимизированная конфигурация для master-replica
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync yes
repl-diskless-sync-delay 1
repl-ping-replica-period 3
repl-timeout 60
repl-disable-tcp-nodelay no
repl-backlog-size 1mb
repl-backlog-ttl 3600
replica-priority 100

# Memory management
# Увеличил лимит памяти с 512MB до 1GB для лучшей производительности кластера
maxmemory 1gb
# Изменил политику очистки с volatile-lru на allkeys-lru для более эффективного использования памяти
maxmemory-policy allkeys-lru
# Оптимизировал количество выборок для LRU алгоритма (стандартное значение 5)
maxmemory-samples 5

# Persistence settings
save 900 1
save 300 10
save 60 10000

stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir /data

# AOF persistence
appendonly yes
appendfilename appendonly.aof
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes

# Slow log
slowlog-log-slower-than 10000
slowlog-max-len 128

# Latency monitoring
latency-monitor-threshold 0

# Client output buffering
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Advanced settings
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100

# Cluster settings
cluster-enabled yes
cluster-config-file nodes-${PORT:-6379}.conf
cluster-node-timeout 15000
cluster-require-full-coverage no
cluster-migration-barrier 1
cluster-slave-validity-factor 0
cluster-allow-replica-migration yes

# Threaded I/O - оптимизировано для текущей нагрузки
io-threads 8
io-threads-do-reads yes

# ===================================================================
# СИСТЕМНЫЕ НАСТРОЙКИ И РЕКОМЕНДАЦИИ
# ===================================================================

# ВАЖНО: Для корректной работы Redis с выделенной памятью необходимо настроить системные параметры

# Настройка sysctl для предотвращения проблем с памятью:
#
# 1. Включите overcommit памяти в /etc/sysctl.conf:
#    vm.overcommit_memory = 1
#    vm.swappiness = 10
#    vm.max_map_count = 262144
#
# 2. Примените изменения:
#    sysctl -p
#
# 3. Проверьте текущие настройки:
#    sysctl vm.overcommit_memory
#    sysctl vm.swappiness
#
# Рекомендуемые значения:
# - vm.overcommit_memory = 1: Разрешает выделение памяти даже если физической памяти недостаточно
# - vm.swappiness = 10: Ограничивает использование swap для лучшей производительности
# - vm.max_map_count = 262144: Увеличивает лимит для процессов с большим количеством memory mappings
#
# Предупреждение: Если вы видите сообщение "Memory overcommit must be enabled",
# выполните команду: sysctl vm.overcommit_memory=1

# Рекомендации по производительности:
# - Мониторьте использование памяти: free -h
# - Следите за swap: swapon --show
# - Проверяйте состояние Redis: redis-cli info memory
# - Регулярно очищайте неиспользуемые ключи: redis-cli --eval cleanup_script.lua
