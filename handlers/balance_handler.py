"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
from typing import Dict, Any, Optional, Union

from aiogram.types import Message, CallbackQuery, InaccessibleMessage
from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from .base_handler import BaseHandler
from .error_handler import ErrorHandler
from utils.rate_limit_messages import RateLimitMessages


class BalanceHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """

    def __init__(self, *args, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        """
        super().__init__(*args, **kwargs)
        self.logger = logging.getLogger(__name__)
        self.error_handler = ErrorHandler(*args, **kwargs)

    async def show_balance(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º ID
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            self.logger.warning("User information is missing in show_balance")
            return

        user_id = message_or_callback.from_user.id
            
        await self.safe_execute(
            user_id=user_id,
            operation="show_balance",
            func=self._show_balance_impl,
            message_or_callback=message_or_callback,
            bot=bot
        )

    async def _show_balance_impl(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            return

        user_id = message_or_callback.from_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
            balance_data = await self.balance_service.get_user_balance(user_id)

            if balance_data:
                balance = balance_data.get("balance", 0)
                currency = balance_data.get("currency", "TON")
                source = balance_data.get("source", "unknown")

                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="recharge"),
                    InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="balance_history")
                )
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")
                )

                balance_message = (
                    f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b> üí∞\n\n"
                    f"‚≠ê <b>{balance:.2f} {currency}</b>\n"
                    f"üìä <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>\n\n"
                    f"üéØ <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞!</i>\n\n"
                    f"‚ú® <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</i>\n"
                    f"   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–≤–µ–∑–¥\n"
                    f"   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º\n"
                    f"   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞\n\n"
                    f"üíé <i>–ö–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ –∏–º–µ–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å!</i>"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if message and hasattr(message, 'edit_text') and not isinstance(message, InaccessibleMessage):
                    try:
                        if is_callback:
                            await message.edit_text(
                                balance_message,
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                        else:
                            await message.answer(
                                balance_message,
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                    except Exception as e:
                        self.logger.error(f"Error editing/answering message in show_balance: {e}")
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if hasattr(message_or_callback, 'answer'):
                            await message_or_callback.answer(
                                balance_message,
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    if hasattr(message_or_callback, 'answer'):
                        await message_or_callback.answer(
                            balance_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if message and hasattr(message, 'edit_text') and not isinstance(message, InaccessibleMessage):
                    try:
                        if is_callback:
                            await message.edit_text(
                                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚ùå\n\n"
                                f"üîß <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>\n\n"
                                f"üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                        else:
                            await message.answer(
                                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚ùå\n\n"
                                f"üîß <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>\n\n"
                                f"üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                    except Exception as e:
                        self.logger.error(f"Error editing/answering message in show_balance error case: {e}")
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if hasattr(message_or_callback, 'answer'):
                            await message_or_callback.answer(
                                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚ùå\n\n"
                                f"üîß <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>\n\n"
                                f"üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    if hasattr(message_or_callback, 'answer'):
                        await message_or_callback.answer(
                            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚ùå\n\n"
                            f"üîß <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>\n\n"
                            f"üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )

        except Exception as e:
            self.logger.error(f"Error showing balance for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            await self.error_handler.show_error_with_suggestions(
                message_or_callback,
                self.error_handler.categorize_error(str(e)),
                {"user_id": user_id, "error": str(e)}
            )

    async def show_balance_history(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º ID
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            self.logger.warning("User information is missing in show_balance")
            return

        user_id = message_or_callback.from_user.id
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ (20 –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –º–∏–Ω—É—Ç—É)
        if not await self.check_rate_limit(user_id, "operation", 20, 60):
            self.logger.warning(f"Rate limit check failed for operation show_balance_history by user {user_id}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            await self._show_rate_limit_message(message_or_callback, "operation")
            return
            
        await self.safe_execute(
            user_id=user_id,
            operation="show_balance_history",
            func=self._show_balance_history_impl,
            message_or_callback=message_or_callback,
            bot=bot
        )

    async def _show_balance_history_impl(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            return

        user_id = message_or_callback.from_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
            history_data = await self.balance_service.get_user_balance_history(user_id, days=30)

            if not history_data or history_data.get("transactions_count", 0) == 0:
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if message and hasattr(message, 'edit_text') and not isinstance(message, InaccessibleMessage):
                    try:
                        if is_callback:
                            await message.edit_text(
                                "üìä <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b> üìä\n\n"
                                f"üîç <i>–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</i>\n\n"
                                f"üí° <i>–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</i>",
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                        else:
                            await message.answer(
                                "üìä <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b> üìä\n\n"
                                f"üîç <i>–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</i>\n\n"
                                f"üí° <i>–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</i>",
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                    except Exception as e:
                        self.logger.error(f"Error editing/answering message in show_balance_history no transactions: {e}")
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if hasattr(message_or_callback, 'answer'):
                            await message_or_callback.answer(
                                "üìä <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b> üìä\n\n"
                                f"üîç <i>–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</i>\n\n"
                                f"üí° <i>–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</i>",
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    if hasattr(message_or_callback, 'answer'):
                        await message_or_callback.answer(
                            "üìä <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b> üìä\n\n"
                            f"üîç <i>–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</i>\n\n"
                            f"üí° <i>–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            initial_balance = history_data.get("initial_balance", 0)
            final_balance = history_data.get("final_balance", 0)
            transactions_count = history_data.get("transactions_count", 0)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            balance_change = final_balance - initial_balance
            if balance_change > 0:
                change_text = f"+{balance_change:.2f} TON"
                change_icon = "üìà"
            elif balance_change < 0:
                change_text = f"{balance_change:.2f} TON"
                change_icon = "üìâ"
            else:
                change_text = f"0.00 TON"
                change_icon = "‚ûñ"

            message_text = (
                f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞ 30 –¥–Ω–µ–π</b> üìä\n\n"
                f"üí∞ <b>–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {initial_balance:.2f} TON\n"
                f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {final_balance:.2f} TON\n"
                f"{change_icon} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {change_text}\n"
                f"üìà <b>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {transactions_count}\n\n"
                f"üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = history_data.get("transactions", [])[:5]
            for i, transaction in enumerate(transactions, 1):
                transaction_type = transaction.get("transaction_type", "unknown")
                amount = transaction.get("amount", 0)
                status = transaction.get("status", "unknown")
                created_at = transaction.get("created_at", "")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                if created_at:
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        date_str = dt.strftime("%d.%m.%Y %H:%M")
                    except:
                        date_str = created_at
                else:
                    date_str = "N/A"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if transaction_type == "purchase":
                    icon = "üõí"
                    sign = "-"
                    operation_name = "–ü–æ–∫—É–ø–∫–∞"
                elif transaction_type == "refund":
                    icon = "üí∞"
                    sign = "+"
                    operation_name = "–í–æ–∑–≤—Ä–∞—Ç"
                elif transaction_type == "bonus":
                    icon = "üéÅ"
                    sign = "+"
                    operation_name = "–ë–æ–Ω—É—Å"
                elif transaction_type == "recharge":
                    icon = "üí≥"
                    sign = "+"
                    operation_name = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
                elif transaction_type == "withdrawal":
                    icon = "üí∏"
                    sign = "-"
                    operation_name = "–°–ø–∏—Å–∞–Ω–∏–µ"
                else:
                    # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Å—É–º–º–µ
                    if amount > 0:
                        icon = "üí∞"
                        sign = "+"
                        operation_name = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
                    else:
                        icon = "üí∏"
                        sign = "-"
                        operation_name = "–°–ø–∏—Å–∞–Ω–∏–µ"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                if status == "completed":
                    status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
                elif status == "failed":
                    status_text = "‚ùå –û—à–∏–±–∫–∞"
                elif status == "pending":
                    status_text = "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                elif status == "cancelled":
                    status_text = "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ"
                else:
                    status_text = "‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                message_text += f"{i}. {icon} <b>{operation_name}</b> {sign}{amount:.2f} TON\n"
                message_text += f"   {status_text} ‚Ä¢ {date_str}\n\n"

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if message and hasattr(message, 'edit_text') and not isinstance(message, InaccessibleMessage):
                try:
                    if is_callback:
                        await message.edit_text(
                            message_text,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            message_text,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                except Exception as e:
                    self.logger.error(f"Error editing/answering message in show_balance_history success case: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if hasattr(message_or_callback, 'answer'):
                        await message_or_callback.answer(
                            message_text,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                if hasattr(message_or_callback, 'answer'):
                    await message_or_callback.answer(
                        message_text,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )

        except Exception as e:
            self.logger.error(f"Error showing balance history for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            await self.error_handler.show_error_with_suggestions(
                message_or_callback,
                self.error_handler.categorize_error(str(e)),
                {"user_id": user_id, "error": str(e)}
            )

    async def handle_message(self, message: Message, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        
        Args:
            message: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
        if message.text and "–±–∞–ª–∞–Ω—Å" in message.text.lower():
            await self.show_balance(message, bot)
        else:
            await message.answer("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b> ‚ùì\n\n"
                               "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</i>\n\n"
                               "üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>",
                               parse_mode="HTML")

    async def handle_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        if callback.data == "balance":
            await self.show_balance(callback, bot)
        elif callback.data == "balance_history":
            await self.show_balance_history(callback, bot)
        elif callback.data == "back_to_balance":
            await self.show_balance(callback, bot)
        else:
            await callback.answer("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> ‚ùì\n\n"
                               "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</i>\n\n"
                               "üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>",
                               show_alert=True)

    async def _show_rate_limit_message(self, message_or_callback: Union[Message, CallbackQuery], limit_type: str) -> None:
        """
        –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ rate limit –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            limit_type: –¢–∏–ø –ª–∏–º–∏—Ç–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º ID
            if not message_or_callback.from_user or not message_or_callback.from_user.id:
                self.logger.warning("User information is missing in _show_rate_limit_message")
                return

            user_id = message_or_callback.from_user.id
            remaining_time = await self.get_rate_limit_remaining_time(user_id, limit_type)
            
            if isinstance(message_or_callback, Message):
                rate_limit_message = RateLimitMessages.get_rate_limit_message(limit_type, remaining_time, for_callback=False)
                await message_or_callback.answer(rate_limit_message, parse_mode="HTML")
            elif isinstance(message_or_callback, CallbackQuery):
                rate_limit_message = RateLimitMessages.get_rate_limit_message(limit_type, remaining_time, for_callback=True)
                await message_or_callback.answer(rate_limit_message, show_alert=True)
                
        except Exception as e:
            self.logger.error(f"Error showing rate limit message: {e}")