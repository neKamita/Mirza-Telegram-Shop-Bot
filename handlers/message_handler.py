"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
"""
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, Any
from core.interfaces import EventHandlerInterface
from repositories.user_repository import UserRepository
from services.payment_service import PaymentService


class MessageHandler(EventHandlerInterface):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥"""

    def __init__(self, user_repository: UserRepository, payment_service: PaymentService):
        self.user_repository = user_repository
        self.payment_service = payment_service

    async def handle_message(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º
        is_premium = await self.user_repository.user_exists(user_id)

        if not is_premium:
            await self._send_payment_request(message, bot)
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

    async def handle_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        callback_data = callback.data

        if callback_data == "create_invoice":
            await self._create_invoice_callback(callback, bot)
        elif callback_data.startswith("check_invoice_"):
            await self._check_payment_callback(callback, bot)

    async def _send_payment_request(self, message: Message, bot: Bot) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        builder = InlineKeyboardBuilder()
        button = InlineKeyboardButton(text="üõí –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="create_invoice")
        builder.row(button)

        await message.answer(
            'üì∞ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. \n\n'
            '–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
            parse_mode='HTML',
            reply_markup=builder.as_markup()
        )

    async def _create_invoice_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞"""
        await callback.answer()

        user_id = callback.from_user.id
        invoice = await self.payment_service.create_invoice_for_user(user_id)

        if "error" in invoice:
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        builder = InlineKeyboardBuilder()
        button = InlineKeyboardButton(
            text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_invoice_{invoice['result']['uuid']}"
        )
        builder.row(button)

        await callback.message.answer(
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {invoice['result']['url']}",
            parse_mode='HTML',
            reply_markup=builder.as_markup()
        )

    async def _check_payment_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã"""
        await callback.answer()

        invoice_uuid = callback.data.split("_")[2]
        payment_info = await self.payment_service.check_payment(invoice_uuid)

        if payment_info.get("result", {}).get("status") == "paid":
            user_id = callback.from_user.id

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.user_repository.add_user(user_id)

            await callback.message.answer("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.")
        else:
            await callback.message.answer("‚ùå –°—á–µ—Ç –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    def register_handlers(self, dp: Dispatcher) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        dp.message.register(self.cmd_start, Command("start"))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        dp.message.register(self.handle_message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
        dp.callback_query.register(self.handle_callback)

    async def cmd_start(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        builder = InlineKeyboardBuilder()
        button = InlineKeyboardButton(text="üõí –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="create_invoice")
        builder.row(button)

        await message.answer(
            'üì∞ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. \n\n'
            '–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
            parse_mode='HTML',
            reply_markup=builder.as_markup()
        )
