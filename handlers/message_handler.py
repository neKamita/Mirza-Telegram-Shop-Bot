"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–π –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import logging

from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, User
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, Any, Optional
from core.interfaces import EventHandlerInterface
from repositories.user_repository import UserRepository
from repositories.balance_repository import BalanceRepository
from services.payment_service import PaymentService
from services.balance_service import BalanceService
from services.star_purchase_service import StarPurchaseService
from services.session_cache import SessionCache
from services.rate_limit_cache import RateLimitCache
from services.payment_cache import PaymentCache


class MessageHandler(EventHandlerInterface):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Å—Å–∏–π –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self,
                 user_repository: UserRepository,
                 payment_service: PaymentService,
                 balance_service: BalanceService,
                 star_purchase_service: StarPurchaseService,
                 session_cache: Optional[SessionCache] = None,
                 rate_limit_cache: Optional[RateLimitCache] = None,
                 payment_cache: Optional[PaymentCache] = None):
        self.user_repository = user_repository
        self.payment_service = payment_service
        self.balance_service = balance_service
        self.star_purchase_service = star_purchase_service
        self.session_cache = session_cache
        self.rate_limit_cache = rate_limit_cache
        self.payment_cache = payment_cache
        self.logger = logging.getLogger(__name__)

    async def handle_message(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏—è–º–∏"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if self.rate_limit_cache:
            allowed = await self.rate_limit_cache.check_user_rate_limit(
                user_id, "message", 10, 60
            )
            if not allowed:
                await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π
        if self.session_cache:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_sessions = await self.session_cache.get_user_sessions(user_id)
            if user_sessions:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                session_data = user_sessions[0]
                await self._handle_message_with_session(message, bot, session_data)
            else:
                await self._create_new_session(message, bot)
        else:
            await self._handle_message_without_session(message, bot)

    async def handle_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏—è–º–∏"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if self.rate_limit_cache:
            allowed = await self.rate_limit_cache.check_user_rate_limit(
                user_id, "callback", 20, 60
            )
            if not allowed:
                await callback.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        callback_data = callback.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Å —É—á–µ—Ç–æ–º —Å–µ—Å—Å–∏–∏
        if callback_data == "balance":
            await self._show_balance(callback, bot)
        elif callback_data == "recharge":
            await self._handle_recharge(callback, bot)
        elif callback_data == "back_to_main":
            await self._back_to_main(callback, bot)
        elif callback_data == "back_to_balance":
            await self._back_to_balance(callback, bot)
        elif callback_data == "recharge_heleket":
            await self._handle_recharge(callback, bot)
        elif callback_data == "recharge_custom":
            await self._show_recharge_custom_amount(callback, bot)
        elif callback_data == "recharge_10":
            await self._handle_recharge_amount(callback, bot, 10.0)
        elif callback_data == "recharge_50":
            await self._handle_recharge_amount(callback, bot, 50.0)
        elif callback_data == "recharge_100":
            await self._handle_recharge_amount(callback, bot, 100.0)
        elif callback_data == "recharge_500":
            await self._handle_recharge_amount(callback, bot, 500.0)
        elif callback_data == "recharge_custom_amount":
            if callback.message:
                await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 10000 TON):")
        elif callback_data.startswith("check_recharge_"):
            await self._check_recharge_status(callback, bot)
        elif callback_data == "buy_stars":
            await self._show_buy_stars(callback, bot)
        elif callback_data == "buy_stars_with_balance":
            await self._show_buy_stars_with_balance(callback, bot)
        elif callback_data == "custom_amount":
            await self._show_custom_amount(callback, bot)
        elif callback_data == "back_to_buy_stars":
            await self._back_to_buy_stars(callback, bot)
        elif callback_data == "buy_100":
            await self._buy_stars_100(callback, bot)
        elif callback_data == "buy_250":
            await self._buy_stars_250(callback, bot)
        elif callback_data == "buy_500":
            await self._buy_stars_500(callback, bot)
        elif callback_data == "buy_1000":
            await self._buy_stars_1000(callback, bot)
        elif callback_data == "buy_100_balance":
            await self._buy_stars_100_balance(callback, bot)
        elif callback_data == "buy_250_balance":
            await self._buy_stars_250_balance(callback, bot)
        elif callback_data == "buy_500_balance":
            await self._buy_stars_500_balance(callback, bot)
        elif callback_data == "buy_1000_balance":
            await self._buy_stars_1000_balance(callback, bot)
        elif callback_data == "help":
            await self._show_help(callback, bot)
        elif callback_data == "create_ticket":
            await self._create_ticket(callback, bot)
        elif callback_data == "back_to_help":
            await self._back_to_help(callback, bot)
        elif callback_data == "balance_history":
            await self._show_balance_history(callback, bot)
        elif callback_data.startswith("check_payment_"):
            await self._check_payment_status(callback, bot)
        elif callback_data == "recharge_custom":
            await self._show_recharge_custom_amount(callback, bot)
        elif callback_data.startswith("check_recharge_"):
            await self._check_recharge_status(callback, bot)

    def register_handlers(self, dp: Dispatcher) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        dp.message.register(self.cmd_start, Command("start"))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        dp.message.register(self.handle_message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
        dp.callback_query.register(self.handle_callback)

    async def cmd_start(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.user_repository.add_user(user_id)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        if self.session_cache:
            await self.session_cache.create_session(user_id, {"state": "main"})

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="1-–ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="2-–ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥", callback_data="buy_stars"),
            InlineKeyboardButton(text="3-–ü–æ–º–æ—â—å", callback_data="help")
        )

        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "1-–ë–∞–ª–∞–Ω—Å\n"
            "2-–ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥\n"
            "3-–ü–æ–º–æ—â—å",
            reply_markup=builder.as_markup()
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:
                await self._create_star_purchase_custom_balance(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000")

    async def _handle_message_with_session(self, message: Message, bot: Bot, session_data: dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:
                await self._create_star_purchase_custom(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1 –¥–æ 10000 –∑–≤–µ–∑–¥")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            if message.text and message.text.replace('.', '', 1).isdigit():
                amount = float(message.text)
                if 10 <= amount <= 10000:
                    await self._handle_recharge_custom_amount_input(message, bot)
                else:
                    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 10 –¥–æ 10000 TON")
            else:
                await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

    async def _create_new_session(self, message: Message, bot: Bot) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.from_user or not message.from_user.id:
            return

        session_data = {
            "user_id": message.from_user.id,
            "state": "main",
            "created_at": message.date.isoformat() if message.date else None
        }

        if self.session_cache:
            await self.session_cache.create_session(message.from_user.id, session_data)

        await message.answer("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:
                await self._create_star_purchase_custom_balance(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000")

        if self.session_cache:
            await self.session_cache.create_session(message.from_user.id, session_data)

        await message.answer("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

    async def _handle_message_without_session(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–µ—Å—Å–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:
                await self._create_star_purchase_custom(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1 –¥–æ 10000 –∑–≤–µ–∑–¥")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            if message.text and message.text.replace('.', '', 1).isdigit():
                amount = float(message.text)
                if 10 <= amount <= 10000:
                    await self._handle_recharge_custom_amount_input(message, bot)
                else:
                    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 10 –¥–æ 10000 TON")
            else:
                await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

    async def _show_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
            balance_data = await self.balance_service.get_user_balance(user_id)

            if balance_data:
                balance = balance_data.get("balance", 0)
                currency = balance_data.get("currency", "TON")
                source = balance_data.get("source", "unknown")

                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="recharge"),
                    InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="balance_history"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                )

                if callback.message:
                    await callback.message.answer(
                        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n"
                        f"‚≠ê {balance:.2f} {currency}\n"
                        f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {source}",
                        reply_markup=builder.as_markup()
                    )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                )

                if callback.message:
                    await callback.message.answer(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=builder.as_markup()
                    )

        except Exception as e:
            self.logger.error(f"Error showing balance for user {user_id}: {e}")

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )

            if callback.message:
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.",
                    reply_markup=builder.as_markup()
                )

    async def _handle_recharge(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Heleket", callback_data="recharge_heleket"),
            InlineKeyboardButton(text="üíé –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="recharge_custom"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
        )

        if callback.message:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=builder.as_markup()
            )

    async def _back_to_main(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="1-–ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="2-–ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥", callback_data="buy_stars"),
            InlineKeyboardButton(text="3-–ü–æ–º–æ—â—å", callback_data="help")
        )

        if callback.message:
            await callback.message.answer(
                "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                "1-–ë–∞–ª–∞–Ω—Å\n"
                "2-–ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥\n"
                "3-–ü–æ–º–æ—â—å",
                reply_markup=builder.as_markup()
            )

    async def _back_to_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._show_balance(callback, bot)

    async def _show_buy_stars(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚≠ê 100 –∑–≤–µ–∑–¥", callback_data="buy_100"),
            InlineKeyboardButton(text="‚≠ê 250 –∑–≤–µ–∑–¥", callback_data="buy_250")
        )
        builder.row(
            InlineKeyboardButton(text="‚≠ê 500 –∑–≤–µ–∑–¥", callback_data="buy_500"),
            InlineKeyboardButton(text="‚≠ê 1000 –∑–≤–µ–∑–¥", callback_data="buy_1000")
        )

        if callback.message:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥:",
                reply_markup=builder.as_markup()
            )

    async def _show_buy_stars_with_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance_data = await self.balance_service.get_user_balance(user_id)
        balance = balance_data.get("balance", 0) if balance_data else 0

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=f"‚≠ê 100 –∑–≤–µ–∑–¥ ({100} TON)", callback_data="buy_100_balance"),
            InlineKeyboardButton(text=f"‚≠ê 250 –∑–≤–µ–∑–¥ ({250} TON)", callback_data="buy_250_balance")
        )
        builder.row(
            InlineKeyboardButton(text=f"‚≠ê 500 –∑–≤–µ–∑–¥ ({500} TON)", callback_data="buy_500_balance"),
            InlineKeyboardButton(text=f"‚≠ê 1000 –∑–≤–µ–∑–¥ ({1000} TON)", callback_data="buy_1000_balance")
        )
        builder.row(
            InlineKeyboardButton(text="üéØ –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_amount_balance"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
        )

        if callback.message:
            await callback.message.answer(
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞:",
                reply_markup=builder.as_markup()
            )

    async def _buy_stars_100_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 100 –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._create_star_purchase_balance(callback, bot, 100)

    async def _buy_stars_250_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 250 –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._create_star_purchase_balance(callback, bot, 250)

    async def _buy_stars_500_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 500 –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._create_star_purchase_balance(callback, bot, 500)

    async def _buy_stars_1000_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 1000 –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._create_star_purchase_balance(callback, bot, 1000)

    async def _create_star_purchase_balance(self, callback: CallbackQuery, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
            purchase_result = await self.star_purchase_service.create_star_purchase(
                user_id=user_id,
                amount=amount,
                purchase_type="balance"
            )

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                if "Insufficient balance" in error_msg:
                    balance_data = await self.balance_service.get_user_balance(user_id)
                    balance = balance_data.get("balance", 0) if balance_data else 0

                    builder = InlineKeyboardBuilder()
                    builder.row(
                        InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="recharge"),
                        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
                    )

                    if callback.message:
                        await callback.message.answer(
                            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON\n"
                            f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount} TON\n\n"
                            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥.",
                            reply_markup=builder.as_markup()
                        )
                else:
                    builder = InlineKeyboardBuilder()
                    builder.row(
                        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
                    )

                    if callback.message:
                        await callback.message.answer(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {error_msg}",
                            reply_markup=builder.as_markup()
                        )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            old_balance = purchase_result.get("old_balance", 0)
            new_balance = purchase_result.get("new_balance", 0)
            stars_count = purchase_result.get("stars_count", 0)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="purchase_history"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
            )

            if callback.message:
                await callback.message.answer(
                    f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
                    f"‚≠ê –ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥: {stars_count}\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ: {old_balance:.2f} TON\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {new_balance:.2f} TON\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                    reply_markup=builder.as_markup()
                )

        except Exception as e:
            self.logger.error(f"Error creating star purchase with balance for user {user_id}: {e}")

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
            )

            if callback.message:
                await callback.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=builder.as_markup()
                )

    async def _show_custom_amount_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()

    async def _create_star_purchase_custom_balance(self, message: Message, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã —Å –±–∞–ª–∞–Ω—Å–∞"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
            purchase_result = await self.star_purchase_service.create_star_purchase(
                user_id=user_id,
                amount=amount,
                purchase_type="balance"
            )

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                if "Insufficient balance" in error_msg:
                    balance_data = await self.balance_service.get_user_balance(user_id)
                    balance = balance_data.get("balance", 0) if balance_data else 0

                    await message.answer(
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON\n"
                        f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount} TON\n\n"
                        f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥."
                    )
                else:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {error_msg}")
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            old_balance = purchase_result.get("old_balance", 0)
            new_balance = purchase_result.get("new_balance", 0)
            stars_count = purchase_result.get("stars_count", 0)

            await message.answer(
                f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
                f"‚≠ê –ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥: {stars_count}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ: {old_balance:.2f} TON\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {new_balance:.2f} TON\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
            )

        except Exception as e:
            self.logger.error(f"Error creating custom star purchase with balance for user {user_id}: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance_data = await self.balance_service.get_user_balance(callback.from_user.id)
        balance = balance_data.get("balance", 0) if balance_data else 0

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
        )

        if callback.message:
            await callback.message.answer(
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞ (1-10000):",
                reply_markup=builder.as_markup()
            )
        builder.row(
            InlineKeyboardButton(text="üéØ –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_amount"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )

        if callback.message:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥:",
                reply_markup=builder.as_markup()
            )

    async def _show_custom_amount(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
        )

        if callback.message:
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                reply_markup=builder.as_markup()
            )

    async def _back_to_buy_stars(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._show_buy_stars(callback, bot)

    async def _buy_stars_100(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 100 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 100)

    async def _buy_stars_250(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 250 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 250)

    async def _buy_stars_500(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 500 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 500)

    async def _buy_stars_1000(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 1000 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 1000)

    async def _create_star_purchase(self, callback: CallbackQuery, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Heleket"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            purchase_result = await self.star_purchase_service.create_star_purchase(user_id, amount)

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                if callback.message:
                    await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {error_msg}")
                return

            result = purchase_result.get("result", {})
            transaction_id = purchase_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                if callback.message:
                    await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_buy_stars"
                )
            )

            if callback.message:
                await callback.message.answer(
                    f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥.\n\n"
                    f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                    f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                    f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}",
                    reply_markup=builder.as_markup()
                )

        except Exception as e:
            self.logger.error(f"Error creating star purchase for user {user_id}: {e}")
            if callback.message:
                await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _create_star_purchase_custom(self, message: Message, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            purchase_result = await self.star_purchase_service.create_star_purchase(user_id, amount)

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {error_msg}")
                return

            result = purchase_result.get("result", {})
            transaction_id = purchase_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_buy_stars"
                )
            )

            await message.answer(
                f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥.\n\n"
                f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}",
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            self.logger.error(f"Error creating custom star purchase for user {user_id}: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _show_help(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–º–æ—â–∏"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", callback_data="create_ticket"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )

        if callback.message:
            await callback.message.answer(
                "ü§ñ –ü–æ–º–æ—â—å\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥\n"
                "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ Heleket\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
                "–ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞.",
                reply_markup=builder.as_markup()
            )

    async def _create_ticket(self, callback: CallbackQuery, bot: Bot) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_help")
        )

        if callback.message:
            await callback.message.answer(
                "üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=builder.as_markup()
            )

    async def _back_to_help(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–º–æ—â–∏"""
        await callback.answer()
        await self._show_help(callback, bot)

    async def _show_balance_history(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
            history_data = await self.balance_service.get_user_balance_history(user_id, days=30)

            if not history_data or history_data.get("transactions_count", 0) == 0:
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
                )

                if callback.message:
                    await callback.message.answer(
                        "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.",
                        reply_markup=builder.as_markup()
                    )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            initial_balance = history_data.get("initial_balance", 0)
            final_balance = history_data.get("final_balance", 0)
            transactions_count = history_data.get("transactions_count", 0)

            message_text = (
                f"üìä –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞ 30 –¥–Ω–µ–π\n\n"
                f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance:.2f} TON\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {final_balance:.2f} TON\n"
                f"üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_count}\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = history_data.get("transactions", [])[:5]
            for i, transaction in enumerate(transactions, 1):
                transaction_type = transaction.get("transaction_type", "unknown")
                amount = transaction.get("amount", 0)
                status = transaction.get("status", "unknown")
                created_at = transaction.get("created_at", "")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                if created_at:
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        date_str = dt.strftime("%d.%m.%Y %H:%M")
                    except:
                        date_str = created_at
                else:
                    date_str = "N/A"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if transaction_type == "purchase":
                    icon = "üõí"
                    sign = "-"
                elif transaction_type == "refund":
                    icon = "üí∞"
                    sign = "+"
                elif transaction_type == "bonus":
                    icon = "üéÅ"
                    sign = "+"
                else:
                    icon = "üìù"
                    sign = ""

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if status == "completed":
                    status_color = "‚úÖ"
                elif status == "failed":
                    status_color = "‚ùå"
                elif status == "pending":
                    status_color = "‚è≥"
                else:
                    status_color = "‚ö™"

                message_text += f"{i}. {icon} {sign}{amount:.2f} TON - {status_color} {date_str}\n"

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
            )

            if callback.message:
                await callback.message.answer(
                    message_text,
                    reply_markup=builder.as_markup()
                )

        except Exception as e:
            self.logger.error(f"Error showing balance history for user {user_id}: {e}")

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
            )

            if callback.message:
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.",
                    reply_markup=builder.as_markup()
                )

    async def _check_payment_status(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id
        payment_id = callback.data.replace("check_payment_", "")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            status_result = await self.star_purchase_service.check_purchase_status(payment_id)

            if status_result.get("status") == "failed":
                error_msg = status_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
                )

                if callback.message:
                    await callback.message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {error_msg}",
                        reply_markup=builder.as_markup()
                    )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            payment_status = status_result.get("status", "unknown")
            amount = status_result.get("amount", 0)
            currency = status_result.get("currency", "TON")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if payment_status == "paid":
                status_message = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
                status_color = "‚úÖ"
            elif payment_status == "pending":
                status_message = "‚è≥ –û–ø–ª–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
                status_color = "‚è≥"
            elif payment_status == "failed":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
                status_color = "‚ùå"
            elif payment_status == "cancelled":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                status_color = "‚ùå"
            else:
                status_message = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
                status_color = "‚ùì"

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"check_payment_{payment_id}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
            )

            if callback.message:
                await callback.message.answer(
                    f"üìã –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞\n\n"
                    f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status_color} {status_message}\n"
                    f"üî¢ ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}",
                    reply_markup=builder.as_markup()
                )

        except Exception as e:
            self.logger.error(f"Error checking payment status for {payment_id}: {e}")

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
            )

            if callback.message:
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.",
                    reply_markup=builder.as_markup()
                )

    async def _show_recharge_custom_amount(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí∞ 10 TON", callback_data="recharge_10"),
            InlineKeyboardButton(text="üí∞ 50 TON", callback_data="recharge_50")
        )
        builder.row(
            InlineKeyboardButton(text="üí∞ 100 TON", callback_data="recharge_100"),
            InlineKeyboardButton(text="üí∞ 500 TON", callback_data="recharge_500")
        )
        builder.row(
            InlineKeyboardButton(text="üéØ –°–≤–æ—è —Å—É–º–º–∞", callback_data="recharge_custom_amount"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
        )

        if callback.message:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=builder.as_markup()
            )

    async def _handle_recharge_amount(self, callback: CallbackQuery, bot: Bot, amount: float) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            recharge_result = await self.star_purchase_service.create_recharge(user_id, amount)

            if recharge_result["status"] == "failed":
                error_msg = recharge_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                if callback.message:
                    await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {error_msg}")
                return

            result = recharge_result.get("result", {})
            transaction_id = recharge_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                if callback.message:
                    await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_recharge_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="recharge_custom"
                )
            )

            if callback.message:
                await callback.message.answer(
                    f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} TON.\n\n"
                    f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                    f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                    f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}",
                    reply_markup=builder.as_markup()
                )

        except Exception as e:
            self.logger.error(f"Error creating recharge for user {user_id}: {e}")
            if callback.message:
                await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _handle_recharge_custom_amount_input(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        try:
            amount = float(message.text)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
            if amount < 10:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 TON")
                return
            if amount > 10000:
                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10000 TON")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            recharge_result = await self.star_purchase_service.create_recharge(user_id, amount)

            if recharge_result["status"] == "failed":
                error_msg = recharge_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {error_msg}")
                return

            result = recharge_result.get("result", {})
            transaction_id = recharge_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_recharge_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="recharge_custom"
                )
            )

            await message.answer(
                f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} TON.\n\n"
                f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}",
                reply_markup=builder.as_markup()
            )

        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")
        except Exception as e:
            self.logger.error(f"Error creating custom recharge for user {user_id}: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _check_recharge_status(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id
        payment_id = callback.data.replace("check_recharge_", "")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            status_result = await self.star_purchase_service.check_recharge_status(payment_id)

            if status_result.get("status") == "failed":
                error_msg = status_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_recharge_{payment_id}"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recharge_custom")
                )

                if callback.message:
                    await callback.message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {error_msg}",
                        reply_markup=builder.as_markup()
                    )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            payment_status = status_result.get("status", "unknown")
            amount = status_result.get("amount", 0)
            currency = status_result.get("currency", "TON")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if payment_status == "paid":
                status_message = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω."
                status_color = "‚úÖ"
            elif payment_status == "pending":
                status_message = "‚è≥ –û–ø–ª–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
                status_color = "‚è≥"
            elif payment_status == "failed":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
                status_color = "‚ùå"
            elif payment_status == "cancelled":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                status_color = "‚ùå"
            else:
                status_message = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
                status_color = "‚ùì"

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"check_recharge_{payment_id}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recharge_custom")
            )

            if callback.message:
                await callback.message.answer(
                    f"üìã –°—Ç–∞—Ç—É—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
                    f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status_color} {status_message}\n"
                    f"üî¢ ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}",
                    reply_markup=builder.as_markup()
                )

        except Exception as e:
            self.logger.error(f"Error checking recharge status for {payment_id}: {e}")

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recharge_custom")
            )

            if callback.message:
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.",
                    reply_markup=builder.as_markup()
                )
