"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–π –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import logging

from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, User
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, Any, Optional
from enum import Enum
from core.interfaces import EventHandlerInterface
from repositories.user_repository import UserRepository
from repositories.balance_repository import BalanceRepository
from services.payment_service import PaymentService
from services.balance_service import BalanceService
from services.star_purchase_service import StarPurchaseService
from services.session_cache import SessionCache
from services.rate_limit_cache import RateLimitCache
from services.payment_cache import PaymentCache


class PurchaseErrorType(Enum):
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"""
    INSUFFICIENT_BALANCE = "insufficient_balance"
    NETWORK_ERROR = "network_error"
    PAYMENT_SYSTEM_ERROR = "payment_system_error"
    VALIDATION_ERROR = "validation_error"
    SYSTEM_ERROR = "system_error"
    UNKNOWN_ERROR = "unknown_error"
    TRANSACTION_FAILED = "transaction_failed"


class PurchaseErrorHandler:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    
    @staticmethod
    def categorize_error(error_message: str) -> PurchaseErrorType:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        error_message = error_message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        insufficient_balance_patterns = [
            "insufficient balance", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞",
            "not enough balance", "balance too low", "funds insufficient",
            "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥", "–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        network_error_patterns = [
            "network", "—Å–µ—Ç—å", "connection", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "timeout",
            "unreachable", "network error", "connection failed", "no connection"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        payment_error_patterns = [
            "payment", "–ø–ª–∞—Ç–µ–∂", "heleket", "payment system", "processing",
            "declined", "failed", "error", "–æ—à–∏–±–∫–∞", "transaction failed"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_error_patterns = [
            "validation", "–≤–∞–ª–∏–¥–∞—Ü–∏—è", "invalid", "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
            "format", "format error", "invalid input", "wrong format"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transaction_error_patterns = [
            "transaction", "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è", "tx", "transfer", "send",
            "transaction failed", "tx failed", "transfer failed"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏
        system_error_patterns = [
            "system", "—Å–∏—Å—Ç–µ–º–∞", "internal", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π", "server",
            "database", "db", "500", "error 500", "service unavailable"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        for pattern in insufficient_balance_patterns:
            if pattern in error_message:
                return PurchaseErrorType.INSUFFICIENT_BALANCE
                
        for pattern in network_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.NETWORK_ERROR
                
        for pattern in payment_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.PAYMENT_SYSTEM_ERROR
                
        for pattern in validation_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.VALIDATION_ERROR
                
        for pattern in transaction_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.TRANSACTION_FAILED
                
        for pattern in system_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.SYSTEM_ERROR
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –ø–æ–¥–æ—à–ª–∞
        return PurchaseErrorType.UNKNOWN_ERROR
    
    @staticmethod
    def get_error_message(error_type: PurchaseErrorType, context: Optional[dict] = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ user-friendly —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        context = context or {}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_id = context.get('user_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        amount = context.get('amount', 0)
        payment_id = context.get('payment_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        error_detail = context.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        
        messages = {
            PurchaseErrorType.INSUFFICIENT_BALANCE: (
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!</b> ‚ùå\n\n"
                f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {context.get('current_balance', 0):.2f} TON\n"
                f"üí∏ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> {context.get('required_amount', amount)} TON\n"
                f"üìâ <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> {context.get('missing_amount', max(0, amount - context.get('current_balance', 0))):.2f} TON\n\n"
                f"üîß <i><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b></i>\n"
                f"   üí≥ <i>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Heleket</i>\n"
                f"   ‚≠ê <i>–í—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥</i>\n"
                f"   üí∞ <i>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>\n\n"
                f"üì± <i>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: {payment_id}</i>\n\n"
                f"üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>"
            ),
            PurchaseErrorType.NETWORK_ERROR: (
                "üåê <b>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</b> üåê\n\n"
                f"üîç <i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –æ–ø–ª–∞—Ç—ã</i>\n"
                f"üìù <i>–û—à–∏–±–∫–∞: {error_detail}</i>\n"
                f"üë§ <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}</i>\n\n"
                f"üîÑ <i><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b></i>\n"
                f"   üì° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</i>\n"
                f"   üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>\n"
                f"   üì± <i>–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥—É—é —Å–µ—Ç—å Wi-Fi/–º–æ–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</i>\n\n"
                f"üìû <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>\n\n"
                f"üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>"
            ),
            PurchaseErrorType.PAYMENT_SYSTEM_ERROR: (
                "üí≥ <b>–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</b> üí≥\n\n"
                f"üîç <i>–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞</i>\n"
                f"üìù <i>–û—à–∏–±–∫–∞: {error_detail}</i>\n"
                f"üí∞ <i>–°—É–º–º–∞: {amount} TON</i>\n\n"
                f"üîÑ <i><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b></i>\n"
                f"   ‚è∞ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</i>\n"
                f"   üí≥ <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>\n"
                f"   üí± <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –∫–∞—Ä—Ç—É</i>\n\n"
                f"üìû <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID: {payment_id}</i>\n\n"
                f"üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>"
            ),
            PurchaseErrorType.VALIDATION_ERROR: (
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</b> ‚ö†Ô∏è\n\n"
                f"üîç <i>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</i>\n"
                f"üìù <i>–û—à–∏–±–∫–∞: {error_detail}</i>\n"
                f"üî¢ <i>–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {amount}</i>\n\n"
                f"üîÑ <i><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b></i>\n"
                f"   ‚úÖ <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</i>\n"
                f"   üìè <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É–º–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ</i>\n"
                f"   üî¢ <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</i>\n\n"
                f"üì± <i>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥: –æ—Ç 1 –¥–æ 10000</i>\n"
                f"üí∞ <i>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: –æ—Ç 10 –¥–æ 10000 TON</i>\n\n"
                f"üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>"
            ),
            PurchaseErrorType.TRANSACTION_FAILED: (
                "üîÑ <b>–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b> üîÑ\n\n"
                f"üîç <i>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é</i>\n"
                f"üìù <i>–û—à–∏–±–∫–∞: {error_detail}</i>\n"
                f"üí∞ <i>–°—É–º–º–∞: {amount} TON</i>\n"
                f"üî¢ <i>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment_id}</i>\n\n"
                f"üîÑ <i><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b></i>\n"
                f"   üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</i>\n"
                f"   üí≥ <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã/–∫–æ—à–µ–ª—å–∫–∞</i>\n"
                f"   üì± <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Ä–∞–∑—Ä–µ—à–µ–Ω –±–∞–Ω–∫–æ–º</i>\n\n"
                f"üìû <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>\n\n"
                f"üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>"
            ),
            PurchaseErrorType.SYSTEM_ERROR: (
                "‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b> ‚ö†Ô∏è\n\n"
                f"üîç <i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</i>\n"
                f"üìù <i>–û—à–∏–±–∫–∞: {error_detail}</i>\n"
                f"üë§ <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}</i>\n\n"
                f"üîÑ <i><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b></i>\n"
                f"   ‚è∞ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ</i>\n"
                f"   üîÑ <i>–û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É</i>\n"
                f"   üì± <i>–û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞</i>\n\n"
                f"üìû <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>\n\n"
                f"üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>"
            ),
            PurchaseErrorType.UNKNOWN_ERROR: (
                "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</b> ‚ùì\n\n"
                f"üîç <i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</i>\n"
                f"üìù <i>–û—à–∏–±–∫–∞: {error_detail}</i>\n"
                f"üë§ <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}</i>\n"
                f"üí∞ <i>–°—É–º–º–∞: {amount} TON</i>\n\n"
                f"üîÑ <i><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b></i>\n"
                f"   üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</i>\n"
                f"   üì± <i>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i>\n"
                f"   üîÑ <i>–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É</i>\n\n"
                f"üìû <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>\n\n"
                f"üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>"
            )
        }
        
        return messages.get(error_type, messages[PurchaseErrorType.UNKNOWN_ERROR])
    
    @staticmethod
    def get_suggested_actions(error_type: PurchaseErrorType) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""
        actions = {
            PurchaseErrorType.INSUFFICIENT_BALANCE: [
                ("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "recharge"),
                ("‚≠ê –í—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à—É—é —Å—É–º–º—É", "reduce_amount"),
                ("üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "alternative_payment")
            ],
            PurchaseErrorType.NETWORK_ERROR: [
                ("üì° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "check_connection"),
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥", "retry_later"),
                ("üì± –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Å–µ—Ç—å", "change_network")
            ],
            PurchaseErrorType.PAYMENT_SYSTEM_ERROR: [
                ("‚è∞ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç", "retry_delayed"),
                ("üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "alternative_payment"),
                ("üí± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É", "change_currency")
            ],
            PurchaseErrorType.VALIDATION_ERROR: [
                ("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "check_input"),
                ("üìè –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã", "validate_amount"),
                ("üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "correct_input")
            ],
            PurchaseErrorType.TRANSACTION_FAILED: [
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "retry"),
                ("üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã/–∫–æ—à–µ–ª—å–∫–∞", "check_balance"),
                ("üì± –£–±–µ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", "check_permission")
            ],
            PurchaseErrorType.SYSTEM_ERROR: [
                ("‚è∞ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ", "retry_later"),
                ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É", "refresh"),
                ("üì± –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞", "clear_cache")
            ],
            PurchaseErrorType.UNKNOWN_ERROR: [
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "retry"),
                ("üì± –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "restart"),
                ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", "refresh")
            ]
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫, –∏ callback_data
        return actions.get(error_type, [("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "retry"), ("üìû –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "support")])


class MessageHandler(EventHandlerInterface):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Å—Å–∏–π –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self,
                 user_repository: UserRepository,
                 payment_service: PaymentService,
                 balance_service: BalanceService,
                 star_purchase_service: StarPurchaseService,
                 session_cache: Optional[SessionCache] = None,
                 rate_limit_cache: Optional[RateLimitCache] = None,
                 payment_cache: Optional[PaymentCache] = None):
        self.user_repository = user_repository
        self.payment_service = payment_service
        self.balance_service = balance_service
        self.star_purchase_service = star_purchase_service
        self.session_cache = session_cache
        self.rate_limit_cache = rate_limit_cache
        self.payment_cache = payment_cache
        self.logger = logging.getLogger(__name__)

    async def _handle_purchase_error(self, error: Exception, context: Optional[dict] = None) -> PurchaseErrorType:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        error_message = str(error)
        error_type = PurchaseErrorHandler.categorize_error(error_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = context.get('user_id', 'unknown') if context else 'unknown'
        amount = context.get('amount', 0) if context else 0
        payment_id = context.get('payment_id', 'unknown') if context else 'unknown'
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        self.logger.error(
            f"Purchase error occurred - User: {user_id}, Amount: {amount}, PaymentID: {payment_id}, "
            f"ErrorType: {error_type.value}, ErrorMessage: {error_message}"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if error_type in [PurchaseErrorType.INSUFFICIENT_BALANCE, PurchaseErrorType.SYSTEM_ERROR, PurchaseErrorType.UNKNOWN_ERROR]:
            self.logger.critical(
                f"Critical purchase error - User: {user_id}, ErrorType: {error_type.value}, "
                f"ErrorMessage: {error_message}"
            )
        
        return error_type

    def _determine_previous_menu(self, callback_data: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data"""
        if callback_data.startswith(("buy_", "custom_")):
            return "–ú–∞–≥–∞–∑–∏–Ω –∑–≤–µ–∑–¥"
        elif callback_data.startswith(("recharge_", "check_recharge_")):
            return "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
        elif callback_data.startswith(("check_payment_", "payment_")):
            return "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"
        elif callback_data in ["balance", "balance_history"]:
            return "–ë–∞–ª–∞–Ω—Å"
        elif callback_data in ["help", "create_ticket"]:
            return "–ü–æ–º–æ—â—å"
        else:
            return "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

    async def _show_error_with_suggestions(self, message: Message | CallbackQuery, error_type: PurchaseErrorType, context: Optional[dict] = None) -> None:
        """–ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
        error_message = PurchaseErrorHandler.get_error_message(error_type, context)
        suggested_actions = PurchaseErrorHandler.get_suggested_actions(error_type)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        for action_text, action_callback in suggested_actions[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏
            builder.row(InlineKeyboardButton(text=f"üîß {action_text}", callback_data=f"error_action_{action_callback}"))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
        if isinstance(message, CallbackQuery):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –º–µ–Ω—é –±—ã–ª–æ –¥–æ –æ—à–∏–±–∫–∏
            previous_menu = self._determine_previous_menu(message.data)
            builder.row(InlineKeyboardButton(text=f"‚¨ÖÔ∏è {previous_menu}", callback_data=f"back_to_{previous_menu.lower().replace(' ', '_')}"))
        else:
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main"))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
        builder.row(InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message, Message):
            await message.answer(error_message, reply_markup=builder.as_markup(), parse_mode="HTML")
        elif isinstance(message, CallbackQuery) and message.message:
            try:
                await message.message.edit_text(error_message, reply_markup=builder.as_markup(), parse_mode="HTML")
            except Exception as e:
                self.logger.error(f"Error editing message for error: {e}")
                await message.message.answer(error_message, reply_markup=builder.as_markup(), parse_mode="HTML")

    async def handle_message(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏—è–º–∏"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if self.rate_limit_cache:
            allowed = await self.rate_limit_cache.check_user_rate_limit(
                user_id, "message", 10, 60
            )
            if not allowed:
                await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π
        if self.session_cache:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_sessions = await self.session_cache.get_user_sessions(user_id)
            if user_sessions:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                session_data = user_sessions[0]
                await self._handle_message_with_session(message, bot, session_data)
            else:
                await self._create_new_session(message, bot)
        else:
            await self._handle_message_without_session(message, bot)

    async def handle_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏—è–º–∏"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if self.rate_limit_cache:
            allowed = await self.rate_limit_cache.check_user_rate_limit(
                user_id, "callback", 20, 60
            )
            if not allowed:
                await callback.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        callback_data = callback.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Å —É—á–µ—Ç–æ–º —Å–µ—Å—Å–∏–∏
        if callback_data == "balance":
            await self._show_balance(callback, bot)
        elif callback_data == "recharge":
            await self._handle_recharge(callback, bot)
        elif callback_data == "back_to_main":
            await self._back_to_main(callback, bot)
        elif callback_data == "back_to_balance":
            await self._back_to_balance(callback, bot)
        elif callback_data == "recharge_heleket":
            await self._handle_recharge(callback, bot)
        elif callback_data == "recharge_custom":
            await self._show_recharge_custom_amount(callback, bot)
        elif callback_data == "recharge_10":
            await self._handle_recharge_amount(callback, bot, 10.0)
        elif callback_data == "recharge_50":
            await self._handle_recharge_amount(callback, bot, 50.0)
        elif callback_data == "recharge_100":
            await self._handle_recharge_amount(callback, bot, 100.0)
        elif callback_data == "recharge_500":
            await self._handle_recharge_amount(callback, bot, 500.0)
        elif callback_data == "recharge_custom_amount":
            if callback.message:
                try:
                    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 10000 TON):")
                except Exception as e:
                    self.logger.error(f"Error editing message for recharge_custom_amount: {e}")
                    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 10000 TON):")
        elif callback_data.startswith("check_recharge_"):
            await self._check_recharge_status(callback, bot)
        elif callback_data == "buy_stars":
            await self._show_buy_stars(callback, bot)
        elif callback_data == "buy_stars_with_balance":
            await self._show_buy_stars_with_balance(callback, bot)
        elif callback_data == "custom_amount":
            await self._show_custom_amount(callback, bot)
        elif callback_data == "custom_amount_balance":
            await self._show_custom_amount_balance(callback, bot)
        elif callback_data == "back_to_buy_stars":
            await self._back_to_buy_stars(callback, bot)
        elif callback_data == "buy_100":
            await self._buy_stars_100(callback, bot)
        elif callback_data == "buy_250":
            await self._buy_stars_250(callback, bot)
        elif callback_data == "buy_500":
            await self._buy_stars_500(callback, bot)
        elif callback_data == "buy_1000":
            await self._buy_stars_1000(callback, bot)
        elif callback_data == "buy_100_balance":
            await self._buy_stars_100_balance(callback, bot)
        elif callback_data == "buy_250_balance":
            await self._buy_stars_250_balance(callback, bot)
        elif callback_data == "buy_500_balance":
            await self._buy_stars_500_balance(callback, bot)
        elif callback_data == "buy_1000_balance":
            await self._buy_stars_1000_balance(callback, bot)
        elif callback_data == "help":
            await self._show_help(callback, bot)
        elif callback_data == "create_ticket":
            await self._create_ticket(callback, bot)
        elif callback_data == "back_to_help":
            await self._back_to_help(callback, bot)
        elif callback_data == "balance_history":
            await self._show_balance_history(callback, bot)
        elif callback_data.startswith("check_payment_"):
            await self._check_payment_status(callback, bot)
        elif callback_data.startswith("error_action_"):
            await self._handle_error_action(callback, bot)
        elif callback_data.startswith("back_to_"):
            await self._handle_back_to_menu(callback, bot)

    def register_handlers(self, dp: Dispatcher) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        dp.message.register(self.cmd_start, Command("start"))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        dp.message.register(self.handle_message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
        dp.callback_query.register(self.handle_callback)

    async def cmd_start(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.user_repository.add_user(user_id)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        if self.session_cache:
            await self.session_cache.create_session(user_id, {"state": "main"})

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="‚≠ê –ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥", callback_data="buy_stars")
        )
        builder.row(
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        )

        welcome_message = (
            "üåü <b>MirzaShopBot</b> üåü\n\n"
            "‚ú® –í–∞—à –ª–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∑–≤–µ–∑–¥! ‚ú®\n\n"
            "üéØ <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!</i>\n\n"
            "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "   üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º\n"
            "   ‚≠ê –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥\n"
            "   üéÅ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏\n"
            "   üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
            "üöÄ <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</i>\n\n"
            "üåü <b>–í–∞—à–∏ –∑–≤–µ–∑–¥—ã –∂–¥—É—Ç –≤–∞—Å!</b> üåü"
        )

        await message.answer(
            welcome_message,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:
                await self._create_star_purchase_custom_balance(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000")
        elif message.text:
            input_text = message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            if all(c.isdigit() or c == '.' for c in input_text):
                if input_text.count('.') <= 1:  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞
                    try:
                        amount = float(input_text)
                        if amount > 0 and 10 <= amount <= 10000:
                            await self._handle_recharge_custom_amount_input(message, bot)
                        elif amount <= 0:
                            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 TON")
                        elif amount < 10:
                            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 TON")
                        elif amount > 10000:
                            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10000 TON")
                        else:
                            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
                    except ValueError:
                        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")
                else:
                    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞)")

    async def _handle_message_with_session(self, message: Message, bot: Bot, session_data: dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:
                await self._create_star_purchase_custom(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            if message.text:
                input_text = message.text.strip()
                
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                if all(c.isdigit() or c == '.' for c in input_text):
                    if input_text.count('.') <= 1:  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞
                        try:
                            amount = float(input_text)
                            if amount > 0 and 10 <= amount <= 10000:
                                await self._handle_recharge_custom_amount_input(message, bot)
                            elif amount <= 0:
                                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 TON")
                            elif amount < 10:
                                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 TON")
                            elif amount > 10000:
                                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10000 TON")
                            else:
                                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
                        except ValueError:
                            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")
                    else:
                        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞)")
                else:
                    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")
            else:
                await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

    async def _create_new_session(self, message: Message, bot: Bot) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if not message.from_user or not message.from_user.id:
            return

        session_data = {
            "user_id": message.from_user.id,
            "state": "main",
            "created_at": message.date.isoformat() if message.date else None
        }

        if self.session_cache:
            await self.session_cache.create_session(message.from_user.id, session_data)

        await message.answer("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:
                await self._create_star_purchase_custom_balance(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000")
        elif message.text:
            input_text = message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            if all(c.isdigit() or c == '.' for c in input_text):
                if input_text.count('.') <= 1:  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞
                    try:
                        amount = float(input_text)
                        if amount > 0 and 10 <= amount <= 10000:
                            await self._handle_recharge_custom_amount_input(message, bot)
                        elif amount <= 0:
                            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 TON")
                        elif amount < 10:
                            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 TON")
                        elif amount > 10000:
                            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10000 TON")
                        else:
                            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
                    except ValueError:
                        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")
                else:
                    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞)")
            else:
                await message.answer("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")
        else:
            await message.answer("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

        if self.session_cache:
            await self.session_cache.create_session(message.from_user.id, session_data)

        await message.answer("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

    async def _handle_message_without_session(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–µ—Å—Å–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:
                await self._create_star_purchase_custom(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            if message.text:
                input_text = message.text.strip()
                
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                if all(c.isdigit() or c == '.' for c in input_text):
                    if input_text.count('.') <= 1:  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞
                        try:
                            amount = float(input_text)
                            if amount > 0 and 10 <= amount <= 10000:
                                await self._handle_recharge_custom_amount_input(message, bot)
                            elif amount <= 0:
                                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 TON")
                            elif amount < 10:
                                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 TON")
                            elif amount > 10000:
                                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10000 TON")
                            else:
                                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
                        except ValueError:
                            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")
                    else:
                        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞)")
                else:
                    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")
            else:
                await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

    async def _show_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
            balance_data = await self.balance_service.get_user_balance(user_id)

            if balance_data:
                balance = balance_data.get("balance", 0)
                currency = balance_data.get("currency", "TON")
                source = balance_data.get("source", "unknown")

                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="recharge"),
                    InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="balance_history")
                )
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")
                )

                balance_message = (
                    f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b> üí∞\n\n"
                    f"‚≠ê <b>{balance:.2f} {currency}</b>\n"
                    f"üìä <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>\n\n"
                    f"üéØ <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞!</i>\n\n"
                    f"‚ú® <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</i>\n"
                    f"   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–≤–µ–∑–¥\n"
                    f"   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º\n"
                    f"   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞\n\n"
                    f"üíé <i>–ö–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ –∏–º–µ–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å!</i>"
                )

                if callback.message:
                    try:
                        await callback.message.edit_text(
                            balance_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        self.logger.error(f"Error editing message in _show_balance: {e}")
                        await callback.message.answer(
                            balance_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                )

                if callback.message:
                    try:
                        await callback.message.edit_text(
                            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚ùå\n\n"
                            f"üîß <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>\n\n"
                            f"üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        self.logger.error(f"Error editing message in _show_balance error case: {e}")
                        await callback.message.answer(
                            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚ùå\n\n"
                            f"üîß <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>\n\n"
                            f"üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )

        except Exception as e:
            self.logger.error(f"Error showing balance for user {user_id}: {e}")

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )

            if callback.message:
                try:
                    await callback.message.edit_text(
                        "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞</b> ‚ùå\n\n"
                        f"üîß <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</i>\n\n"
                        f"üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    self.logger.error(f"Error editing message in _show_balance exception case: {e}")
                    await callback.message.answer(
                        "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞</b> ‚ùå\n\n"
                        f"üîß <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</i>\n\n"
                        f"üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )

    async def _handle_recharge(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Heleket", callback_data="recharge_heleket"),
            InlineKeyboardButton(text="üíé –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="recharge_custom"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
        )

        if callback.message:
            try:
                await callback.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                self.logger.error(f"Error editing message in _handle_recharge: {e}")
                await callback.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                    reply_markup=builder.as_markup()
                )

    async def _back_to_main(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="‚≠ê –ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥", callback_data="buy_stars")
        )
        builder.row(
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        )

        welcome_message = (
            "üåü <b>MirzaShopBot</b> üåü\n\n"
            "‚ú® –í–∞—à –ª–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∑–≤–µ–∑–¥! ‚ú®\n\n"
            "üéØ <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!</i>\n\n"
            "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "   üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º\n"
            "   ‚≠ê –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥\n"
            "   üéÅ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏\n"
            "   üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
            "üöÄ <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</i>\n\n"
            "üåü <b>–í–∞—à–∏ –∑–≤–µ–∑–¥—ã –∂–¥—É—Ç –≤–∞—Å!</b> üåü"
        )

        if callback.message:
            try:
                await callback.message.edit_text(
                    welcome_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                self.logger.error(f"Error editing message in _back_to_main: {e}")
                await callback.message.answer(
                    welcome_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )

    async def _back_to_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._show_balance(callback, bot)

    async def _show_buy_stars(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚≠ê 100 –∑–≤–µ–∑–¥ üíé", callback_data="buy_100"),
            InlineKeyboardButton(text="‚≠ê 250 –∑–≤–µ–∑–¥ üíé", callback_data="buy_250")
        )
        builder.row(
            InlineKeyboardButton(text="‚≠ê 500 –∑–≤–µ–∑–¥ üíé", callback_data="buy_500"),
            InlineKeyboardButton(text="‚≠ê 1000 –∑–≤–µ–∑–¥ üíé", callback_data="buy_1000")
        )
        builder.row(
            InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="buy_stars_with_balance"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )

        stars_message = (
            "‚≠ê <b>–ú–∞–≥–∞–∑–∏–Ω –∑–≤–µ–∑–¥</b> ‚≠ê\n\n"
            "üåü <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –≤–∞—à–∏—Ö –Ω—É–∂–¥!</i> üåü\n\n"
            "üíé <b>–ö–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b> üíé\n\n"
            "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>\n\n"
            "üî∏ <b>100 –∑–≤–µ–∑–¥</b> - <i>–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞</i>\n"
            "   üéÅ <i>+10 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–≤–µ–∑–¥</i>\n"
            "   üí∞ <i>–≠–∫–æ–Ω–æ–º–∏—è: 5%</i>\n\n"
            "üî∏ <b>250 –∑–≤–µ–∑–¥</b> - <i>–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä</i>\n"
            "   üéÅ <i>+25 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–≤–µ–∑–¥</i>\n"
            "   üí∞ <i>–≠–∫–æ–Ω–æ–º–∏—è: 10%</i>\n\n"
            "üî∏ <b>500 –∑–≤–µ–∑–¥</b> - <i>–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</i>\n"
            "   üéÅ <i>+50 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–≤–µ–∑–¥</i>\n"
            "   üí∞ <i>–≠–∫–æ–Ω–æ–º–∏—è: 15%</i>\n\n"
            "üî∏ <b>1000 –∑–≤–µ–∑–¥</b> - <i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞</i>\n"
            "   üéÅ <i>+100 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–≤–µ–∑–¥</i>\n"
            "   üí∞ <i>–≠–∫–æ–Ω–æ–º–∏—è: 20%</i>\n\n"
            "üöÄ <i>–ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –≤—ã—à–µ –±–æ–Ω—É—Å!</i>"
        )

        if callback.message:
            try:
                await callback.message.edit_text(
                    stars_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                self.logger.error(f"Error editing message in _show_buy_stars: {e}")
                await callback.message.answer(
                    stars_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )

    async def _show_buy_stars_with_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance_data = await self.balance_service.get_user_balance(user_id)
        balance = balance_data.get("balance", 0) if balance_data else 0

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=f"‚≠ê 100 –∑–≤–µ–∑–¥ üíé ({100} TON)", callback_data="buy_100_balance"),
            InlineKeyboardButton(text=f"‚≠ê 250 –∑–≤–µ–∑–¥ üíé ({250} TON)", callback_data="buy_250_balance")
        )
        builder.row(
            InlineKeyboardButton(text=f"‚≠ê 500 –∑–≤–µ–∑–¥ üíé ({500} TON)", callback_data="buy_500_balance"),
            InlineKeyboardButton(text=f"‚≠ê 1000 –∑–≤–µ–∑–¥ üíé ({1000} TON)", callback_data="buy_1000_balance")
        )
        builder.row(
            InlineKeyboardButton(text="üéØ –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_amount_balance"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
        )

        balance_stars_message = (
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>: {balance:.2f} TON\n\n"
            "‚≠ê <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞</b> ‚≠ê\n\n"
            "üéØ <i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É</i> üéØ\n\n"
            "üíé <b>–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π</b> üíé\n\n"
            "‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            "   ‚ö° <i>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞</i>\n"
            "   üí∞ <i>–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π</i>\n"
            "   üéÅ <i>–£–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</i>\n\n"
            "üî• <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏ —É–¥–æ–±–Ω–æ–π –ø–æ–∫—É–ø–∫–∏!</i>"
        )

        if callback.message:
            try:
                await callback.message.edit_text(
                    balance_stars_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                self.logger.error(f"Error editing message in _show_buy_stars_with_balance: {e}")
                await callback.message.answer(
                    balance_stars_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )

    async def _buy_stars_100_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 100 –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._create_star_purchase_balance(callback, bot, 100)

    async def _buy_stars_250_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 250 –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._create_star_purchase_balance(callback, bot, 250)

    async def _buy_stars_500_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 500 –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._create_star_purchase_balance(callback, bot, 500)

    async def _buy_stars_1000_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 1000 –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._create_star_purchase_balance(callback, bot, 1000)

    async def _create_star_purchase_balance(self, callback: CallbackQuery, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            original_message = callback.message
            original_callback_data = callback.data

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
            purchase_result = await self.star_purchase_service.create_star_purchase(
                user_id=user_id,
                amount=amount,
                purchase_type="balance"
            )

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                error_type = await self._handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                balance_data = await self.balance_service.get_user_balance(user_id)
                balance = balance_data.get("balance", 0) if balance_data else 0
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                error_context = {
                    "current_balance": balance,
                    "required_amount": amount,
                    "missing_amount": max(0, amount - balance),
                    "user_id": user_id,
                    "amount": amount
                }
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self._show_error_with_suggestions(callback, error_type, error_context)
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            old_balance = purchase_result.get("old_balance", 0)
            new_balance = purchase_result.get("new_balance", 0)
            stars_count = purchase_result.get("stars_count", 0)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="purchase_history"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
            )

            success_message = (
                f"üéâ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b> üéâ\n\n"
                f"‚≠ê <b>–ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥:</b> {stars_count}\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –¥–æ:</b> {old_balance:.2f} TON\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ:</b> {new_balance:.2f} TON\n\n"
                f"üåü <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</i> üåü\n\n"
                f"‚ú® –í–∞—à–∏ –∑–≤–µ–∑–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            )

            if callback.message:
                try:
                    await callback.message.edit_text(
                        success_message,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    self.logger.error(f"Error editing message in _create_star_purchase_balance success case: {e}")
                    await callback.message.answer(
                        success_message,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )

        except Exception as e:
            self.logger.error(f"Error creating star purchase with balance for user {user_id}: {e}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_type = await self._handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "amount": amount, "error": str(e)})

    async def _show_buy_stars_with_error(self, callback: CallbackQuery, bot: Bot, error_message: str, failed_amount: Optional[int] = None) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é
        balance_data = await self.balance_service.get_user_balance(user_id)
        balance = balance_data.get("balance", 0) if balance_data else 0

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=f"‚≠ê 100 –∑–≤–µ–∑–¥ üíé ({100} TON)", callback_data="buy_100_balance"),
            InlineKeyboardButton(text=f"‚≠ê 250 –∑–≤–µ–∑–¥ üíé ({250} TON)", callback_data="buy_250_balance")
        )
        builder.row(
            InlineKeyboardButton(text=f"‚≠ê 500 –∑–≤–µ–∑–¥ üíé ({500} TON)", callback_data="buy_500_balance"),
            InlineKeyboardButton(text=f"‚≠ê 1000 –∑–≤–µ–∑–¥ üíé ({1000} TON)", callback_data="buy_1000_balance")
        )
        builder.row(
            InlineKeyboardButton(text="üéØ –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_amount_balance"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –∏ –±–∞–ª–∞–Ω—Å–æ–º
        balance_stars_message = (
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>: {balance:.2f} TON\n\n"
            f"{error_message}\n\n"
            "‚≠ê <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞</b> ‚≠ê\n\n"
            "üéØ <i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É</i> üéØ\n\n"
            "üíé <b>–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π</b> üíé\n\n"
            "‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            "   ‚ö° <i>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞</i>\n"
            "   üí∞ <i>–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π</i>\n"
            "   üéÅ <i>–£–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</i>\n\n"
            "üî• <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏ —É–¥–æ–±–Ω–æ–π –ø–æ–∫—É–ø–∫–∏!</i>"
        )

        if callback.message:
            try:
                await callback.message.edit_text(
                    balance_stars_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                self.logger.error(f"Error editing message in _show_buy_stars_with_error: {e}")
                await callback.message.answer(
                    balance_stars_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )

    async def _show_custom_amount_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
        )

        if callback.message:
            try:
                await callback.message.edit_text(
                    "üéØ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞</b> üéØ\n\n"
                    f"üí° <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000</i>\n\n"
                    f"üîß <i>–°—É–º–º–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞</i>\n\n"
                    f"üí∞ <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</i>",
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                self.logger.error(f"Error editing message in _show_custom_amount_balance: {e}")
                await callback.message.answer(
                    "üéØ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞</b> üéØ\n\n"
                    f"üí° <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000</i>\n\n"
                    f"üîß <i>–°—É–º–º–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞</i>\n\n"
                    f"üí∞ <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</i>",
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )

    async def _create_star_purchase_custom_balance(self, message: Message, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã —Å –±–∞–ª–∞–Ω—Å–∞"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
            purchase_result = await self.star_purchase_service.create_star_purchase(
                user_id=user_id,
                amount=amount,
                purchase_type="balance"
            )

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                error_type = await self._handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                balance_data = await self.balance_service.get_user_balance(user_id)
                balance = balance_data.get("balance", 0) if balance_data else 0
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                error_context = {
                    "current_balance": balance,
                    "required_amount": amount,
                    "missing_amount": max(0, amount - balance),
                    "user_id": user_id,
                    "amount": amount
                }
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self._show_error_with_suggestions(message, error_type, error_context)
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            old_balance = purchase_result.get("old_balance", 0)
            new_balance = purchase_result.get("new_balance", 0)
            stars_count = purchase_result.get("stars_count", 0)

            success_message = (
                f"üéâ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b> üéâ\n\n"
                f"‚≠ê <b>–ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥:</b> {stars_count}\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –¥–æ:</b> {old_balance:.2f} TON\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ:</b> {new_balance:.2f} TON\n\n"
                f"üåü <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</i> üåü\n\n"
                f"‚ú® –í–∞—à–∏ –∑–≤–µ–∑–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            )

            await message.answer(success_message, parse_mode="HTML")

        except Exception as e:
            self.logger.error(f"Error creating custom star purchase with balance for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_type = await self._handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self._show_error_with_suggestions(message, error_type, {"user_id": user_id, "amount": amount, "error": str(e)})

    async def _show_custom_amount(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
        )

        if callback.message:
            try:
                await callback.message.edit_text(
                    "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                self.logger.error(f"Error editing message in _show_custom_amount: {e}")
                await callback.message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                    reply_markup=builder.as_markup()
                )

    async def _back_to_buy_stars(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._show_buy_stars(callback, bot)

    async def _buy_stars_100(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 100 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 100)

    async def _buy_stars_250(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 250 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 250)

    async def _buy_stars_500(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 500 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 500)

    async def _buy_stars_1000(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 1000 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 1000)

    async def _create_star_purchase(self, callback: CallbackQuery, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Heleket"""
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            purchase_result = await self.star_purchase_service.create_star_purchase(user_id, amount)

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                error_type = await self._handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "amount": amount})
                return

            result = purchase_result.get("result", {})
            transaction_id = purchase_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                if callback.message:
                    try:
                        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                    except Exception as e:
                        self.logger.error(f"Error editing message in _create_star_purchase data error case: {e}")
                        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_buy_stars"
                )
            )

            if callback.message:
                try:
                    await callback.message.edit_text(
                        f"‚úÖ <b>–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥</b> ‚úÖ\n\n"
                        f"üí≥ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> {result['url']}\n\n"
                        f"üìã <b>ID —Å—á–µ—Ç–∞:</b> {result['uuid']}\n"
                        f"üî¢ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction_id}\n\n"
                        f"üîó <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>\n"
                        f"‚è∞ <i>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</i>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    self.logger.error(f"Error editing message in _create_star_purchase success case: {e}")
                    await callback.message.answer(
                        f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥.\n\n"
                        f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                        f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                        f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}",
                        reply_markup=builder.as_markup()
                    )

        except Exception as e:
            self.logger.error(f"Error creating star purchase for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_type = await self._handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "amount": amount, "error": str(e)})

    async def _create_star_purchase_custom(self, message: Message, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            purchase_result = await self.star_purchase_service.create_star_purchase(user_id, amount)

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                error_type = await self._handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self._show_error_with_suggestions(message, error_type, {"user_id": user_id, "amount": amount})
                return

            result = purchase_result.get("result", {})
            transaction_id = purchase_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_buy_stars"
                )
            )

            await message.answer(
                f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥.\n\n"
                f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}",
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            self.logger.error(f"Error creating custom star purchase for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_type = await self._handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self._show_error_with_suggestions(message, error_type, {"user_id": user_id, "amount": amount, "error": str(e)})

    async def _show_help(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–º–æ—â–∏"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", callback_data="create_ticket"),
            InlineKeyboardButton(text="üìö –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )

        help_message = (
            "ü§ñ <b>–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> ü§ñ\n\n"
            "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n"
            "   üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º TON\n"
            "   ‚≠ê –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Heleket\n"
            "   üéÅ –ë–æ–Ω—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
            "   üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "   üé´ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üí° <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
            "   1. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
            "   2. ‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥\n"
            "   3. üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
            "   4. üéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!\n\n"
            "üåü <b>–ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "   üîì –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "   ‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞\n"
            "   üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
            "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
            "   üìß –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏\n"
            "   üïí –û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
        )

        if callback.message:
            await callback.message.answer(
                help_message,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )

    async def _create_ticket(self, callback: CallbackQuery, bot: Bot) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_help")
        )

        if callback.message:
            await callback.message.answer(
                "üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=builder.as_markup()
            )

    async def _back_to_help(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–º–æ—â–∏"""
        await callback.answer()
        await self._show_help(callback, bot)

    async def _show_balance_history(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
            history_data = await self.balance_service.get_user_balance_history(user_id, days=30)

            if not history_data or history_data.get("transactions_count", 0) == 0:
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
                )

                if callback.message:
                    try:
                        await callback.message.edit_text(
                            "üìä <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b> üìä\n\n"
                            f"üîç <i>–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</i>\n\n"
                            f"üí° <i>–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        self.logger.error(f"Error editing message in _show_balance_history no transactions: {e}")
                        await callback.message.answer(
                            "üìä <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b> üìä\n\n"
                            f"üîç <i>–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</i>\n\n"
                            f"üí° <i>–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            initial_balance = history_data.get("initial_balance", 0)
            final_balance = history_data.get("final_balance", 0)
            transactions_count = history_data.get("transactions_count", 0)

            message_text = (
                f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞ 30 –¥–Ω–µ–π</b> üìä\n\n"
                f"üí∞ <b>–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {initial_balance:.2f} TON\n"
                f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {final_balance:.2f} TON\n"
                f"üìà <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {transactions_count}\n\n"
                f"üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = history_data.get("transactions", [])[:5]
            for i, transaction in enumerate(transactions, 1):
                transaction_type = transaction.get("transaction_type", "unknown")
                amount = transaction.get("amount", 0)
                status = transaction.get("status", "unknown")
                created_at = transaction.get("created_at", "")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                if created_at:
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        date_str = dt.strftime("%d.%m.%Y %H:%M")
                    except:
                        date_str = created_at
                else:
                    date_str = "N/A"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if transaction_type == "purchase":
                    icon = "üõí"
                    sign = "-"
                elif transaction_type == "refund":
                    icon = "üí∞"
                    sign = "+"
                elif transaction_type == "bonus":
                    icon = "üéÅ"
                    sign = "+"
                else:
                    icon = "üìù"
                    sign = ""

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if status == "completed":
                    status_color = "‚úÖ"
                elif status == "failed":
                    status_color = "‚ùå"
                elif status == "pending":
                    status_color = "‚è≥"
                else:
                    status_color = "‚ö™"

                message_text += f"{i}. {icon} {sign}{amount:.2f} TON - {status_color} {date_str}\n"

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
            )

            if callback.message:
                try:
                    await callback.message.edit_text(
                        message_text,
                        reply_markup=builder.as_markup()
                    )
                except Exception as e:
                    self.logger.error(f"Error editing message in _show_balance_history success case: {e}")
                    await callback.message.answer(
                        message_text,
                        reply_markup=builder.as_markup()
                    )

        except Exception as e:
            self.logger.error(f"Error showing balance history for user {user_id}: {e}")

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
            )

            if callback.message:
                try:
                    await callback.message.edit_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.",
                        reply_markup=builder.as_markup()
                    )
                except Exception as e:
                    self.logger.error(f"Error editing message in _show_balance_history exception case: {e}")
                    await callback.message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.",
                        reply_markup=builder.as_markup()
                    )

    async def _check_payment_status(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id
        payment_id = callback.data.replace("check_payment_", "")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            status_result = await self.star_purchase_service.check_purchase_status(payment_id)

            if status_result.get("status") == "failed":
                error_msg = status_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                error_type = await self._handle_purchase_error(Exception(error_msg), {"user_id": user_id, "payment_id": payment_id})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "payment_id": payment_id, "error": error_msg})
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            payment_status = status_result.get("status", "unknown")
            amount = status_result.get("amount", 0)
            currency = status_result.get("currency", "TON")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if payment_status == "paid":
                status_message = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
                status_color = "‚úÖ"
            elif payment_status == "pending":
                status_message = "‚è≥ –û–ø–ª–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
                status_color = "‚è≥"
            elif payment_status == "failed":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
                status_color = "‚ùå"
            elif payment_status == "cancelled":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                status_color = "‚ùå"
            else:
                status_message = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
                status_color = "‚ùì"

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"check_payment_{payment_id}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
            )

            if callback.message:
                try:
                    await callback.message.edit_text(
                        f"üìã <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞</b> üìã\n\n"
                        f"üí≥ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
                        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_color} {status_message}\n"
                        f"üî¢ <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}\n\n"
                        f"üîÑ <i>–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    self.logger.error(f"Error editing message in _check_payment_status success case: {e}")
                    await callback.message.answer(
                        f"üìã –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞\n\n"
                        f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: {status_color} {status_message}\n"
                        f"üî¢ ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}",
                        reply_markup=builder.as_markup()
                    )

        except Exception as e:
            self.logger.error(f"Error checking payment status for {payment_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_type = await self._handle_purchase_error(e, {"user_id": user_id, "payment_id": payment_id})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "payment_id": payment_id, "error": str(e)})

    async def _show_recharge_custom_amount(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí∞ 10 TON", callback_data="recharge_10"),
            InlineKeyboardButton(text="üí∞ 50 TON", callback_data="recharge_50")
        )
        builder.row(
            InlineKeyboardButton(text="üí∞ 100 TON", callback_data="recharge_100"),
            InlineKeyboardButton(text="üí∞ 500 TON", callback_data="recharge_500")
        )
        builder.row(
            InlineKeyboardButton(text="üéØ –°–≤–æ—è —Å—É–º–º–∞", callback_data="recharge_custom_amount"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
        )

        if callback.message:
            try:
                await callback.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                self.logger.error(f"Error editing message in _show_recharge_custom_amount: {e}")
                await callback.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                    reply_markup=builder.as_markup()
                )

    async def _handle_recharge_amount(self, callback: CallbackQuery, bot: Bot, amount: float) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            recharge_result = await self.star_purchase_service.create_recharge(user_id, amount)

            if recharge_result["status"] == "failed":
                error_msg = recharge_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                error_type = await self._handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "amount": amount, "error": error_msg})
                return

            result = recharge_result.get("result", {})
            transaction_id = recharge_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                if callback.message:
                    try:
                        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                    except Exception as e:
                        self.logger.error(f"Error editing message in _handle_recharge_amount data error case: {e}")
                        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_recharge_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="recharge_custom"
                )
            )

            if callback.message:
                try:
                    await callback.message.edit_text(
                        f"‚úÖ <b>–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} TON</b> ‚úÖ\n\n"
                        f"üí≥ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> {result['url']}\n\n"
                        f"üìã <b>ID —Å—á–µ—Ç–∞:</b> {result['uuid']}\n"
                        f"üî¢ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction_id}\n\n"
                        f"üîó <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>\n"
                        f"‚è∞ <i>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</i>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    self.logger.error(f"Error editing message in _handle_recharge_amount success case: {e}")
                    await callback.message.answer(
                        f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} TON.\n\n"
                        f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                        f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                        f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}",
                        reply_markup=builder.as_markup()
                    )

        except Exception as e:
            self.logger.error(f"Error creating recharge for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_type = await self._handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "amount": amount, "error": str(e)})

    async def _handle_recharge_custom_amount_input(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if not message.from_user or not message.from_user.id:
            return

        user_id = message.from_user.id

        try:
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
            input_text = message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            if not input_text:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
            if not all(c.isdigit() or c == '.' for c in input_text):
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∞)")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫
            if input_text.count('.') > 1:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞)")
                return

            amount = float(input_text)

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
            if amount <= 0:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 TON")
                return
            if amount < 10:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 TON")
                return
            if amount > 10000:
                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10000 TON")
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—É–º–º—ã (–º–µ–Ω–µ–µ 0.01 TON)
            if amount < 0.01:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 0.01 TON")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            recharge_result = await self.star_purchase_service.create_recharge(user_id, amount)

            if recharge_result["status"] == "failed":
                error_msg = recharge_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                error_type = await self._handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self._show_error_with_suggestions(message, error_type, {"user_id": user_id, "amount": amount, "error": error_msg})
                return

            result = recharge_result.get("result", {})
            transaction_id = recharge_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_recharge_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="recharge_custom"
                )
            )

            await message.answer(
                f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} TON.\n\n"
                f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}",
                reply_markup=builder.as_markup()
            )

        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")
        except Exception as e:
            self.logger.error(f"Error creating custom recharge for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_type = await self._handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self._show_error_with_suggestions(message, error_type, {"user_id": user_id, "amount": amount, "error": str(e)})

    async def _check_recharge_status(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await callback.answer()

        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id
        payment_id = callback.data.replace("check_recharge_", "")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            status_result = await self.star_purchase_service.check_recharge_status(payment_id)

            if status_result.get("status") == "failed":
                error_msg = status_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                error_type = await self._handle_purchase_error(Exception(error_msg), {"user_id": user_id, "payment_id": payment_id})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "payment_id": payment_id, "error": error_msg})
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            payment_status = status_result.get("status", "unknown")
            amount = status_result.get("amount", 0)
            currency = status_result.get("currency", "TON")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if payment_status == "paid":
                status_message = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω."
                status_color = "‚úÖ"
            elif payment_status == "pending":
                status_message = "‚è≥ –û–ø–ª–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
                status_color = "‚è≥"
            elif payment_status == "failed":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
                status_color = "‚ùå"
            elif payment_status == "cancelled":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                status_color = "‚ùå"
            else:
                status_message = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
                status_color = "‚ùì"

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"check_recharge_{payment_id}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recharge_custom")
            )

            if callback.message:
                try:
                    await callback.message.edit_text(
                        f"üìã <b>–°—Ç–∞—Ç—É—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b> üìã\n\n"
                        f"üí≥ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
                        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_color} {status_message}\n"
                        f"üî¢ <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}\n\n"
                        f"üîÑ <i>–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    self.logger.error(f"Error editing message in _check_recharge_status success case: {e}")
                    await callback.message.answer(
                        f"üìã –°—Ç–∞—Ç—É—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
                        f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: {status_color} {status_message}\n"
                        f"üî¢ ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}",
                        reply_markup=builder.as_markup()
                    )

        except Exception as e:
            self.logger.error(f"Error checking recharge status for {payment_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_type = await self._handle_purchase_error(e, {"user_id": user_id, "payment_id": payment_id})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self._show_error_with_suggestions(callback, error_type, {"user_id": user_id, "payment_id": payment_id, "error": str(e)})

    async def _handle_error_action(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        await callback.answer()
        
        if not callback.from_user or not callback.from_user.id:
            return
            
        user_id = callback.from_user.id
        action = callback.data.replace("error_action_", "")
        
        self.logger.info(f"User {user_id} selected error action: {action}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
        if action == "recharge":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            await self._handle_recharge(callback, bot)
        elif action == "reduce_amount":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –º–µ–Ω—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏
            await self._show_buy_stars(callback, bot)
        elif action == "alternative_payment":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
            await self._handle_recharge(callback, bot)
        elif action == "check_connection":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await callback.message.answer("üì° <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b> üì°\n\n"
                                        "üîç <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</i>\n\n"
                                        "üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>\n\n"
                                        "üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                        parse_mode="HTML")
        elif action == "retry_later":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
            await callback.message.answer("‚è∞ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ</b> ‚è∞\n\n"
                                        "üîÑ <i>–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</i>\n\n"
                                        "‚è≥ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</i>\n\n"
                                        "üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                        parse_mode="HTML")
        elif action == "retry":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
            await callback.message.answer("üîÑ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞</b> üîÑ\n\n"
                                        "‚ö° <i>–°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞</i>\n\n"
                                        "üîß <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>\n\n"
                                        "üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                        parse_mode="HTML")
        elif action == "support":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–º–æ—â–∏
            await self._show_help(callback, bot)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self._back_to_main(callback, bot)

    async def _handle_back_to_menu(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        await callback.answer()
        
        if not callback.from_user or not callback.from_user.id:
            return
            
        user_id = callback.from_user.id
        menu_name = callback.data.replace("back_to_", "").replace("_", " ").title()
        
        self.logger.info(f"User {user_id} wants to go back to: {menu_name}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ–Ω—é
        if "Main" in menu_name or "–ì–ª–∞–≤–Ω–æ–µ" in menu_name:
            await self._back_to_main(callback, bot)
        elif "Balance" in menu_name or "–ë–∞–ª–∞–Ω—Å" in menu_name:
            await self._show_balance(callback, bot)
        elif "Stars" in menu_name or "–ó–≤–µ–∑–¥" in menu_name or "–ú–∞–≥–∞–∑–∏–Ω" in menu_name:
            await self._show_buy_stars(callback, bot)
        elif "Recharge" in menu_name or "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" in menu_name:
            await self._handle_recharge(callback, bot)
        elif "Help" in menu_name or "–ü–æ–º–æ—â—å" in menu_name:
            await self._show_help(callback, bot)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self._back_to_main(callback, bot)
