"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
"""
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, Any
from core.interfaces import EventHandlerInterface
from repositories.user_repository import UserRepository
from services.payment_service import PaymentService


class MessageHandler(EventHandlerInterface):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥"""

    def __init__(self, user_repository: UserRepository, payment_service: PaymentService):
        self.user_repository = user_repository
        self.payment_service = payment_service

    async def handle_message(self, message: Message, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        if message.text and message.text.isdigit():
            amount = int(message.text)
            if 1 <= amount <= 10000:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
                await self._create_star_purchase_custom(message, bot, amount)
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1 –¥–æ 10000 –∑–≤–µ–∑–¥")
        else:
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")

    async def handle_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        callback_data = callback.data

        if callback_data == "balance":
            await self._show_balance(callback, bot)
        elif callback_data == "recharge":
            await self._handle_recharge(callback, bot)
        elif callback_data == "back_to_main":
            await self._back_to_main(callback, bot)
        elif callback_data == "back_to_balance":
            await self._back_to_balance(callback, bot)
        elif callback_data == "recharge_heleket":
            await self._handle_recharge(callback, bot)
        elif callback_data == "buy_stars":
            await self._show_buy_stars(callback, bot)
        elif callback_data == "custom_amount":
            await self._show_custom_amount(callback, bot)
        elif callback_data == "back_to_buy_stars":
            await self._back_to_buy_stars(callback, bot)
        elif callback_data == "buy_100":
            await self._buy_stars_100(callback, bot)
        elif callback_data == "buy_250":
            await self._buy_stars_250(callback, bot)
        elif callback_data == "buy_500":
            await self._buy_stars_500(callback, bot)
        elif callback_data == "buy_1000":
            await self._buy_stars_1000(callback, bot)
        elif callback_data == "help":
            await self._show_help(callback, bot)
        elif callback_data == "create_ticket":
            await self._create_ticket(callback, bot)
        elif callback_data == "back_to_help":
            await self._back_to_help(callback, bot)


    def register_handlers(self, dp: Dispatcher) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        dp.message.register(self.cmd_start, Command("start"))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        dp.message.register(self.handle_message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
        dp.callback_query.register(self.handle_callback)

    async def cmd_start(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="1-–ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="2-–ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥", callback_data="buy_stars"),
            InlineKeyboardButton(text="3-–ü–æ–º–æ—â—å", callback_data="help")
        )

        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "1-–ë–∞–ª–∞–Ω—Å\n"
            "2-–ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥\n"
            "3-–ü–æ–º–æ—â—å",
            reply_markup=builder.as_markup()
        )

    async def _show_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="recharge"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )

        await callback.message.answer(
            "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n"
            "‚≠ê 1000 –∑–≤–µ–∑–¥",
            reply_markup=builder.as_markup()
        )

    async def _handle_recharge(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Heleket", callback_data="recharge_heleket"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_balance")
        )

        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

    async def _back_to_main(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="1-–ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="2-–ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥", callback_data="buy_stars"),
            InlineKeyboardButton(text="3-–ü–æ–º–æ—â—å", callback_data="help")
        )

        await callback.message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "1-–ë–∞–ª–∞–Ω—Å\n"
            "2-–ü–æ–∫—É–ø–∫–∞ –ó–≤–µ–∑–¥\n"
            "3-–ü–æ–º–æ—â—å",
            reply_markup=builder.as_markup()
        )

    async def _back_to_balance(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –±–∞–ª–∞–Ω—Å–∞"""
        await callback.answer()
        await self._show_balance(callback, bot)

    async def _show_buy_stars(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚≠ê 100 –∑–≤–µ–∑–¥", callback_data="buy_100"),
            InlineKeyboardButton(text="‚≠ê 250 –∑–≤–µ–∑–¥", callback_data="buy_250")
        )
        builder.row(
            InlineKeyboardButton(text="‚≠ê 500 –∑–≤–µ–∑–¥", callback_data="buy_500"),
            InlineKeyboardButton(text="‚≠ê 1000 –∑–≤–µ–∑–¥", callback_data="buy_1000")
        )
        builder.row(
            InlineKeyboardButton(text="üéØ –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_amount"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )

        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥:",
            reply_markup=builder.as_markup()
        )

    async def _show_custom_amount(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
        )

        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=builder.as_markup()
        )

    async def _back_to_buy_stars(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._show_buy_stars(callback, bot)

    async def _buy_stars_100(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 100 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 100)

    async def _buy_stars_250(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 250 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 250)

    async def _buy_stars_500(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 500 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 500)

    async def _buy_stars_1000(self, callback: CallbackQuery, bot: Bot) -> None:
        """–ü–æ–∫—É–ø–∫–∞ 1000 –∑–≤–µ–∑–¥"""
        await callback.answer()
        await self._create_star_purchase(callback, bot, 1000)

    async def _create_star_purchase(self, callback: CallbackQuery, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Heleket"""
        user_id = callback.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ create_invoice_for_user —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—É–º–º—ã
            invoice = await self.payment_service.create_invoice_for_user(user_id, str(amount))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
            if "error" in invoice or "status" in invoice and invoice["status"] == "failed":
                error_msg = invoice.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {error_msg}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if "result" not in invoice:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            result = invoice["result"]
            if "uuid" not in result or "url" not in result:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_buy_stars"
                )
            )

            await callback.message.answer(
                f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥.\n\n"
                f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}",
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _show_help(self, callback: CallbackQuery, bot: Bot) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–º–æ—â–∏"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", callback_data="create_ticket"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )

        await callback.message.answer(
            "ü§ñ –ü–æ–º–æ—â—å\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ Heleket\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
            "–ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞.",
            reply_markup=builder.as_markup()
        )

    async def _create_ticket(self, callback: CallbackQuery, bot: Bot) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞"""
        await callback.answer()

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_help")
        )

        await callback.message.answer(
            "üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=builder.as_markup()
        )

    async def _back_to_help(self, callback: CallbackQuery, bot: Bot) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–º–æ—â–∏"""
        await callback.answer()
        await self._show_help(callback, bot)

    async def _create_star_purchase_custom(self, message: Message, bot: Bot, amount: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""
        user_id = message.from_user.id

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ create_invoice_for_user —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—É–º–º—ã
            invoice = await self.payment_service.create_invoice_for_user(user_id, str(amount))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
            if "error" in invoice or "status" in invoice and invoice["status"] == "failed":
                error_msg = invoice.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {error_msg}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if "result" not in invoice:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            result = invoice["result"]
            if "uuid" not in result or "url" not in result:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_buy_stars"
                )
            )

            await message.answer(
                f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥.\n\n"
                f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}",
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
