"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
"""
import logging
from enum import Enum
from typing import Dict, Any, Optional, List

from aiogram.types import Message, CallbackQuery, InaccessibleMessage
from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from .base_handler import BaseHandler
from services.balance.balance_service import BalanceService
from utils.message_templates import MessageTemplate


class PurchaseErrorType(Enum):
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"""
    INSUFFICIENT_BALANCE = "insufficient_balance"
    NETWORK_ERROR = "network_error"
    PAYMENT_SYSTEM_ERROR = "payment_system_error"
    VALIDATION_ERROR = "validation_error"
    SYSTEM_ERROR = "system_error"
    UNKNOWN_ERROR = "unknown_error"
    TRANSACTION_FAILED = "transaction_failed"


class ErrorHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –æ—Ç BaseHandler
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    """

    def __init__(self, *args, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        """
        super().__init__(*args, **kwargs)
        self.logger = logging.getLogger(__name__)

    def categorize_error(self, error_message: str) -> PurchaseErrorType:
        """
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        
        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—à–∏–±–∫–∏
        """
        error_message = error_message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        insufficient_balance_patterns = [
            "insufficient balance", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞",
            "not enough balance", "balance too low", "funds insufficient",
            "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥", "–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        network_error_patterns = [
            "network", "—Å–µ—Ç—å", "connection", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "timeout",
            "unreachable", "network error", "connection failed", "no connection"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        payment_error_patterns = [
            "payment", "–ø–ª–∞—Ç–µ–∂", "heleket", "payment system", "processing",
            "declined", "failed", "error", "–æ—à–∏–±–∫–∞", "transaction failed"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_error_patterns = [
            "validation", "–≤–∞–ª–∏–¥–∞—Ü–∏—è", "invalid", "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
            "format", "format error", "invalid input", "wrong format"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transaction_error_patterns = [
            "transaction", "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è", "tx", "transfer", "send",
            "transaction failed", "tx failed", "transfer failed"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏
        system_error_patterns = [
            "system", "—Å–∏—Å—Ç–µ–º–∞", "internal", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π", "server",
            "database", "db", "500", "error 500", "service unavailable"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        for pattern in insufficient_balance_patterns:
            if pattern in error_message:
                return PurchaseErrorType.INSUFFICIENT_BALANCE
                
        for pattern in network_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.NETWORK_ERROR
                
        for pattern in payment_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.PAYMENT_SYSTEM_ERROR
                
        for pattern in validation_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.VALIDATION_ERROR
                
        for pattern in transaction_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.TRANSACTION_FAILED
                
        for pattern in system_error_patterns:
            if pattern in error_message:
                return PurchaseErrorType.SYSTEM_ERROR
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –ø–æ–¥–æ—à–ª–∞
        return PurchaseErrorType.UNKNOWN_ERROR

    def get_error_message(self, error_type: PurchaseErrorType, context: Optional[dict] = None) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ user-friendly —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        
        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        context = context or {}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_id = context.get('user_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        amount = context.get('amount', 0)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ amount —Ä–∞–≤–µ–Ω None
        if amount is None:
            amount = 0
        payment_id = context.get('payment_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        error_detail = context.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MessageTemplate –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        error_mapping = {
            PurchaseErrorType.INSUFFICIENT_BALANCE: 'validation',
            PurchaseErrorType.NETWORK_ERROR: 'network',
            PurchaseErrorType.PAYMENT_SYSTEM_ERROR: 'payment',
            PurchaseErrorType.VALIDATION_ERROR: 'validation',
            PurchaseErrorType.TRANSACTION_FAILED: 'payment',
            PurchaseErrorType.SYSTEM_ERROR: 'system',
            PurchaseErrorType.UNKNOWN_ERROR: 'unknown'
        }
        
        template_error_type = error_mapping.get(error_type, 'unknown')
        context['error'] = error_detail
        context['payment_id'] = payment_id
        
        return MessageTemplate.get_error_message(template_error_type, context)

    def get_suggested_actions(self, error_type: PurchaseErrorType) -> List[tuple]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        
        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏, callback_data)
        """
        actions = {
            PurchaseErrorType.INSUFFICIENT_BALANCE: [
                ("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "recharge"),
                ("‚≠ê –í—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à—É—é —Å—É–º–º—É", "reduce_amount"),
                ("üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "alternative_payment")
            ],
            PurchaseErrorType.NETWORK_ERROR: [
                ("üì° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "check_connection"),
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥", "retry_later"),
                ("üì± –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Å–µ—Ç—å", "change_network")
            ],
            PurchaseErrorType.PAYMENT_SYSTEM_ERROR: [
                ("‚è∞ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç", "retry_delayed"),
                ("üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "alternative_payment"),
                ("üí± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É", "change_currency")
            ],
            PurchaseErrorType.VALIDATION_ERROR: [
                ("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "check_input"),
                ("üìè –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã", "validate_amount"),
                ("üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "correct_input")
            ],
            PurchaseErrorType.TRANSACTION_FAILED: [
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "retry"),
                ("üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã/–∫–æ—à–µ–ª—å–∫–∞", "check_balance"),
                ("üì± –£–±–µ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", "check_permission")
            ],
            PurchaseErrorType.SYSTEM_ERROR: [
                ("‚è∞ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ", "retry_later"),
                ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É", "refresh"),
                ("üì± –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞", "clear_cache")
            ],
            PurchaseErrorType.UNKNOWN_ERROR: [
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "retry"),
                ("üì± –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "restart"),
                ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", "refresh")
            ]
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫, –∏ callback_data
        return actions.get(error_type, [("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "retry"), ("üìû –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "support")])

    async def handle_purchase_error(self, error: Exception, context: Optional[dict] = None) -> PurchaseErrorType:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            –¢–∏–ø –æ—à–∏–±–∫–∏
        """
        error_message = str(error)
        error_type = self.categorize_error(error_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = context.get('user_id', 'unknown') if context else 'unknown'
        amount = context.get('amount', 0) if context else 0
        payment_id = context.get('payment_id', 'unknown') if context else 'unknown'
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        self.logger.error(
            f"Purchase error occurred - User: {user_id}, Amount: {amount}, PaymentID: {payment_id}, "
            f"ErrorType: {error_type.value}, ErrorMessage: {error_message}"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if error_type in [PurchaseErrorType.INSUFFICIENT_BALANCE, PurchaseErrorType.SYSTEM_ERROR, PurchaseErrorType.UNKNOWN_ERROR]:
            self.logger.critical(
                f"Critical purchase error - User: {user_id}, ErrorType: {error_type.value}, "
                f"ErrorMessage: {error_message}"
            )
        
        return error_type

    async def show_error_with_suggestions(self, message: Message | CallbackQuery, error_type: PurchaseErrorType, context: Optional[dict] = None) -> None:
        """
        –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        """
        error_message = self.get_error_message(error_type, context)
        suggested_actions = self.get_suggested_actions(error_type)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        for action_text, action_callback in suggested_actions[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏
            builder.row(InlineKeyboardButton(text=f"üîß {action_text}", callback_data=f"error_action_{action_callback}"))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
        if isinstance(message, CallbackQuery):
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main"))
        else:
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main"))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
        builder.row(InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message, Message):
            await message.answer(error_message, reply_markup=builder.as_markup(), parse_mode="HTML")
        elif isinstance(message, CallbackQuery) and message.message:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if isinstance(message.message, InaccessibleMessage):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.answer(error_message, show_alert=True)
            else:
                try:
                    await message.message.edit_text(error_message, reply_markup=builder.as_markup(), parse_mode="HTML")
                except TelegramBadRequest as e:
                    self.logger.error(f"TelegramBadRequest while editing message: {e}")
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(error_message, show_alert=True)
                except Exception as e:
                    self.logger.error(f"Unexpected error editing message: {e}")
                    await message.answer(error_message, show_alert=True)

    async def handle_error_action(self, callback: CallbackQuery, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await callback.answer()
        
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        if not callback.data:
            return

        action = callback.data.replace("error_action_", "")
        
        self.logger.info(f"User {user_id} selected error action: {action}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
        if action == "recharge":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            if callback.message:
                await callback.message.answer("üîÑ <b>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b> üîÑ\n\n"
                                            "üí≥ <i>–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</i>\n\n"
                                            "üí° <i>–ü–æ–¥–æ–∂–¥–∏—Ç–µ...</i>",
                                            parse_mode="HTML")
            else:
                await callback.answer("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
                                    "üí≥ –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
                                    "üí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
                                    show_alert=True)
        elif action == "reduce_amount":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –º–µ–Ω—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏
            if callback.message:
                await callback.message.answer("‚≠ê <b>–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥</b> ‚≠ê\n\n"
                                            "üéØ <i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å –º–µ–Ω—å—à–µ–π —Å—É–º–º–æ–π</i>\n\n"
                                            "üí° <i>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...</i>",
                                            parse_mode="HTML")
            else:
                await callback.answer("‚≠ê –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥\n\n"
                                    "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å –º–µ–Ω—å—à–µ–π —Å—É–º–º–æ–π\n\n"
                                    "üí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...",
                                    show_alert=True)
        elif action == "alternative_payment":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
            if callback.message:
                await callback.message.answer("üí≥ <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b> üí≥\n\n"
                                            "üîÑ <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>\n\n"
                                            "üí° <i>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...</i>",
                                            parse_mode="HTML")
            else:
                await callback.answer("üí≥ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã\n\n"
                                    "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n"
                                    "üí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...",
                                    show_alert=True)
        elif action == "check_connection":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if callback.message:
                await callback.message.answer("üì° <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b> üì°\n\n"
                                            "üîç <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</i>\n\n"
                                            "üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>\n\n"
                                            "üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                            parse_mode="HTML")
            else:
                await callback.answer("üì° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n\n"
                                    "üîç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n\n"
                                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥\n\n"
                                    "üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                                    show_alert=True)
        elif action == "retry_later":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
            if callback.message:
                await callback.message.answer("‚è∞ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ</b> ‚è∞\n\n"
                                            "üîÑ <i>–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</i>\n\n"
                                            "‚è≥ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</i>\n\n"
                                            "üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                            parse_mode="HTML")
            else:
                await callback.answer("‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ\n\n"
                                    "üîÑ –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                                    "‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n\n"
                                    "üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                                    show_alert=True)
        elif action == "retry":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
            if callback.message:
                await callback.message.answer("üîÑ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞</b> üîÑ\n\n"
                                            "‚ö° <i>–°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞</i>\n\n"
                                            "üîß <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>\n\n"
                                            "üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                                            parse_mode="HTML")
            else:
                await callback.answer("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞\n\n"
                                    "‚ö° –°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞\n\n"
                                    "üîß –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n\n"
                                    "üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                                    show_alert=True)
        elif action == "support":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–º–æ—â–∏
            from config.settings import settings
            if callback.message:
                await callback.message.answer("ü§ñ <b>–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> ü§ñ\n\n"
                                            "üìû <i>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã</i>\n\n"
                                            f"üë§ <i>–ö–æ–Ω—Ç–∞–∫—Ç: {settings.support_contact}</i>\n\n"
                                            "‚è∞ <i>–û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</i>",
                                            parse_mode="HTML")
            else:
                await callback.answer("ü§ñ –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                                    "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã\n\n"
                                    f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {settings.support_contact}\n\n"
                                    "‚è∞ –û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤",
                                    show_alert=True)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if callback.message:
                await callback.message.answer("üîÑ <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üîÑ\n\n"
                                            "üè† <i>–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>\n\n"
                                            "üí° <i>–ü–æ–¥–æ–∂–¥–∏—Ç–µ...</i>",
                                            parse_mode="HTML")
            else:
                await callback.answer("üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                                    "üè† –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                                    "üí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
                                    show_alert=True)

    async def handle_message(self, message: Message, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        """
        self.logger.info(f"Error handling message from user {message.from_user.id if message.from_user else 'unknown'}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        if message.text and "–æ—à–∏–±–∫–∞" in message.text.lower():
            await self.show_error_with_suggestions(
                message, 
                PurchaseErrorType.UNKNOWN_ERROR, 
                {"user_id": message.from_user.id if message.from_user else "unknown", "error": "–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏"}
            )
        else:
            await message.answer("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b> ‚ùì\n\n"
                               "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</i>\n\n"
                               "üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>",
                               parse_mode="HTML")

    async def handle_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        """
        self.logger.info(f"Error handling callback from user {callback.from_user.id if callback.from_user else 'unknown'}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ—à–∏–±–∫–∞–º–∏
        if callback.data == "error_action_support":
            await self.show_error_with_suggestions(
                callback,
                PurchaseErrorType.UNKNOWN_ERROR,
                {"user_id": callback.from_user.id if callback.from_user else "unknown", "error": "–ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"}
            )
        else:
            await callback.answer("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> ‚ùì\n\n"
                               "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</i>\n\n"
                               "üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>",
                               show_alert=True)