"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–∫—É–ø–∫–æ–π –∑–≤–µ–∑–¥
"""
import logging
from typing import Dict, Any, Optional, Union

from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from .base_handler import BaseHandler
from .error_handler import ErrorHandler
from utils.rate_limit_messages import RateLimitMessages


class PurchaseHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–∫—É–ø–∫–æ–π –∑–≤–µ–∑–¥
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Heleket –∏ —Å –±–∞–ª–∞–Ω—Å–∞
    """

    def __init__(self, *args, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
        """
        super().__init__(*args, **kwargs)
        self.logger = logging.getLogger(__name__)
        self.error_handler = ErrorHandler(*args, **kwargs)

    def _format_payment_status(self, status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏"""
        status_formats = {
            'pending': '‚è≥ <b>—Å—Ç–∞—Ç—É—Å: pending</b>',
            'paid': '‚úÖ <b>—Å—Ç–∞—Ç—É—Å: paid</b>',
            'failed': '‚ùå <b>—Å—Ç–∞—Ç—É—Å: failed</b>',
            'expired': '‚ö™ <b>—Å—Ç–∞—Ç—É—Å: expired</b>',
            'cancelled': '‚ùå <b>—Å—Ç–∞—Ç—É—Å: cancelled</b>',
            'processing': 'üîÑ <b>—Å—Ç–∞—Ç—É—Å: processing</b>',
            'unknown': '‚ùì <b>—Å—Ç–∞—Ç—É—Å: unknown</b>'
        }
        return status_formats.get(status.lower(), '‚ùì <b>—Å—Ç–∞—Ç—É—Å: unknown</b>')

    async def _show_buy_stars_menu(self, callback: CallbackQuery, bot: Bot, payment_type: str = "card") -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            payment_type: –¢–∏–ø –æ–ø–ª–∞—Ç—ã ("card", "balance" –∏–ª–∏ "fragment")
        """
        builder = InlineKeyboardBuilder()
        
        if payment_type == "card":
            # –ú–µ–Ω—é –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π/–∫–æ—à–µ–ª—å–∫–æ–º
            builder.row(
                InlineKeyboardButton(text="‚≠ê 100 –∑–≤–µ–∑–¥", callback_data="buy_100"),
                InlineKeyboardButton(text="‚≠ê 250 –∑–≤–µ–∑–¥", callback_data="buy_250")
            )
            builder.row(
                InlineKeyboardButton(text="‚≠ê 500 –∑–≤–µ–∑–¥", callback_data="buy_500"),
                InlineKeyboardButton(text="‚≠ê 1000 –∑–≤–µ–∑–¥", callback_data="buy_1000")
            )
            title = "üí≥ <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ –∫–∞—Ä—Ç–æ–π/–∫–æ—à–µ–ª—å–∫–æ–º</b> üí≥"
            description = "üîó <i>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É Heleket</i>"
        elif payment_type == "balance":
            # –ú–µ–Ω—é –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞
            builder.row(
                InlineKeyboardButton(text="‚≠ê 100 –∑–≤–µ–∑–¥", callback_data="buy_100_balance"),
                InlineKeyboardButton(text="‚≠ê 250 –∑–≤–µ–∑–¥", callback_data="buy_250_balance")
            )
            builder.row(
                InlineKeyboardButton(text="‚≠ê 500 –∑–≤–µ–∑–¥", callback_data="buy_500_balance"),
                InlineKeyboardButton(text="‚≠ê 1000 –∑–≤–µ–∑–¥", callback_data="buy_1000_balance")
            )
            title = "üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞</b> üí∞"
            description = "üí∏ <i>–°–ø–∏—Å–∞–Ω–∏–µ —Å –≤–∞—à–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞</i>"
        else:
            # –ú–µ–Ω—é –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Fragment API
            builder.row(
                InlineKeyboardButton(text="‚≠ê 100 –∑–≤–µ–∑–¥", callback_data="buy_100_fragment"),
                InlineKeyboardButton(text="‚≠ê 250 –∑–≤–µ–∑–¥", callback_data="buy_250_fragment")
            )
            builder.row(
                InlineKeyboardButton(text="‚≠ê 500 –∑–≤–µ–∑–¥", callback_data="buy_500_fragment"),
                InlineKeyboardButton(text="‚≠ê 1000 –∑–≤–µ–∑–¥", callback_data="buy_1000_fragment")
            )
            title = "üíé <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment</b> üíé"
            description = "üöÄ <i>–ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ Telegram Fragment API</i>"
        
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        
        message_text = (
            f"{title}\n\n"
            f"{description}\n\n"
            f"üéØ <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:</i>\n\n"
            f"‚ú® <i>–ö–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ –∏–º–µ–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å!</i>"
        )
        
        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            self.logger.error(f"Error editing message in _show_buy_stars_menu: {e}")
            await callback.message.answer(
                message_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )

    async def buy_stars_preset(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: int) -> None:
        """
        –ü–æ–∫—É–ø–∫–∞È¢ÑËÆæ –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        if isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
        else:
            user_id = message_or_callback.from_user.id
            
        await self.safe_execute(
            user_id=user_id,
            operation="buy_stars_preset",
            func=self._buy_stars_preset_impl,
            message_or_callback=message_or_callback,
            bot=bot,
            amount=amount
        )

    async def _buy_stars_preset_impl(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: int) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏È¢ÑËÆæ –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥ (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å) - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            return

        user_id = message_or_callback.from_user.id
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if is_callback:
                await message_or_callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É...", show_alert=False)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å)
            purchase_result = await self.star_purchase_service.create_star_purchase(user_id, amount, purchase_type="balance")

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                if "Insufficient balance" in error_msg:
                    await self._handle_insufficient_balance_error(
                        message_or_callback, 
                        user_id, 
                        amount,
                        purchase_result.get("current_balance", 0),
                        purchase_result.get("required_amount", amount)
                    )
                    return
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                error_type = await self.error_handler.handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self.error_handler.show_error_with_suggestions(
                    message_or_callback,
                    error_type,
                    {"user_id": user_id, "amount": amount}
                )
                return

            # –ü–æ—Å–∫–æ–ª—å–∫—É —Ç–µ–ø–µ—Ä—å –ø–æ–∫—É–ø–∫–∞ –∏–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            old_balance = purchase_result.get("old_balance", 0)
            new_balance = purchase_result.get("new_balance", 0)
            stars_count = purchase_result.get("stars_count", 0)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="balance_history"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )

            success_message = (
                f"üéâ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b> üéâ\n\n"
                f"‚≠ê <b>–ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥:</b> {stars_count}\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –¥–æ:</b> {old_balance:.2f} TON\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ:</b> {new_balance:.2f} TON\n\n"
                f"üåü <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</i> üåü\n\n"
                f"‚ú® –í–∞—à–∏ –∑–≤–µ–∑–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            )

            if message:
                try:
                    if is_callback:
                        await message.edit_text(
                            success_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            success_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                except Exception as e:
                    self.logger.error(f"Error editing/answering message in buy_stars_preset success case: {e}")
                    await message.answer(
                        success_message,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )

        except Exception as e:
            self.logger.error(f"Error creating star purchase for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_type = await self.error_handler.handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self.error_handler.show_error_with_suggestions(
                message_or_callback,
                error_type,
                {"user_id": user_id, "amount": amount, "error": str(e)}
            )

    async def buy_stars_custom(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: int) -> None:
        """
        –ü–æ–∫—É–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        if isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
        else:
            user_id = message_or_callback.from_user.id
            
        await self.safe_execute(
            user_id=user_id,
            operation="buy_stars_custom",
            func=self._buy_stars_custom_impl,
            message_or_callback=message_or_callback,
            bot=bot,
            amount=amount
        )

    async def _buy_stars_custom_impl(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: int) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å)
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            return

        user_id = message_or_callback.from_user.id
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å)
            purchase_result = await self.star_purchase_service.create_star_purchase(user_id, amount, purchase_type="balance")

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
                error_type = await self.error_handler.handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self.error_handler.show_error_with_suggestions(
                    message_or_callback,
                    error_type,
                    {"user_id": user_id, "amount": amount}
                )
                return

            result = purchase_result.get("result", {})
            transaction_id = purchase_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                if message:
                    try:
                        if is_callback:
                            await message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                        else:
                            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                    except Exception as e:
                        self.logger.error(f"Error editing/answering message in buy_stars_custom data error case: {e}")
                        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_buy_stars"
                )
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_line = self._format_payment_status("pending")
            
            if message:
                try:
                    if is_callback:
                        await message.edit_text(
                            f"‚úÖ <b>–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥</b> ‚úÖ\n\n"
                            f"üí≥ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> {result['url']}\n\n"
                            f"üìã <b>ID —Å—á–µ—Ç–∞:</b> {result['uuid']}\n"
                            f"üî¢ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction_id}\n"
                            f"{status_line}\n\n"
                            f"üîó <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>\n"
                            f"‚è∞ <i>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            f"‚úÖ <b>–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥</b> ‚úÖ\n\n"
                            f"üí≥ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> {result['url']}\n\n"
                            f"üìã <b>ID —Å—á–µ—Ç–∞:</b> {result['uuid']}\n"
                            f"üî¢ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction_id}\n"
                            f"{status_line}\n\n"
                            f"üîó <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>\n"
                            f"‚è∞ <i>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                except Exception as e:
                    self.logger.error(f"Error editing/answering message in buy_stars_custom success case: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
                    status_line = self._format_payment_status("pending")
                    await message.answer(
                        f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} –∑–≤–µ–∑–¥.\n\n"
                        f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                        f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                        f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}\n"
                        f"{status_line}",
                        reply_markup=builder.as_markup()
                    )

        except Exception as e:
            self.logger.error(f"Error creating custom star purchase for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_type = await self.error_handler.handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self.error_handler.show_error_with_suggestions(
                message_or_callback,
                error_type,
                {"user_id": user_id, "amount": amount, "error": str(e)}
            )

    async def buy_stars_with_balance(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: int) -> None:
        """
        –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        if isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
        else:
            user_id = message_or_callback.from_user.id
            
        await self.safe_execute(
            user_id=user_id,
            operation="buy_stars_with_balance",
            func=self._buy_stars_with_balance_impl,
            message_or_callback=message_or_callback,
            bot=bot,
            amount=amount
        )

    async def buy_stars_with_fragment(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: int) -> None:
        """
        –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        if isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
        else:
            user_id = message_or_callback.from_user.id
            
        await self.safe_execute(
            user_id=user_id,
            operation="buy_stars_with_fragment",
            func=self._buy_stars_with_fragment_impl,
            message_or_callback=message_or_callback,
            bot=bot,
            amount=amount
        )

    async def _buy_stars_with_balance_impl(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: int) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            return

        user_id = message_or_callback.from_user.id
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            original_message = message

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞
            purchase_result = await self.star_purchase_service.create_star_purchase(
                user_id=user_id,
                amount=amount,
                purchase_type="balance"
            )

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
                error_type = await self.error_handler.handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                balance_data = await self.balance_service.get_user_balance(user_id)
                balance = balance_data.get("balance", 0) if balance_data else 0
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                error_context = {
                    "current_balance": balance,
                    "required_amount": amount,
                    "missing_amount": max(0, amount - balance),
                    "user_id": user_id,
                    "amount": amount
                }
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self.error_handler.show_error_with_suggestions(
                    message_or_callback,
                    error_type,
                    error_context
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            old_balance = purchase_result.get("old_balance", 0)
            new_balance = purchase_result.get("new_balance", 0)
            stars_count = purchase_result.get("stars_count", 0)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="purchase_history"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
            )

            success_message = (
                f"üéâ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b> üéâ\n\n"
                f"‚≠ê <b>–ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥:</b> {stars_count}\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –¥–æ:</b> {old_balance:.2f} TON\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ:</b> {new_balance:.2f} TON\n\n"
                f"üåü <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</i> üåü\n\n"
                f"‚ú® –í–∞—à–∏ –∑–≤–µ–∑–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            )

            if message:
                try:
                    if is_callback:
                        await message.edit_text(
                            success_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            success_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                except Exception as e:
                    self.logger.error(f"Error editing/answering message in buy_stars_with_balance success case: {e}")
                    await message.answer(
                        success_message,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )

        except Exception as e:
            self.logger.error(f"Error creating star purchase with balance for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_type = await self.error_handler.handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self.error_handler.show_error_with_suggestions(
                message_or_callback,
                error_type,
                {"user_id": user_id, "amount": amount, "error": str(e)}
            )

    async def _buy_stars_with_fragment_impl(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: int) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment API
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            return

        user_id = message_or_callback.from_user.id
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if is_callback:
                await message_or_callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Fragment...", show_alert=False)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment API
            purchase_result = await self.star_purchase_service.create_star_purchase(
                user_id=user_id,
                amount=amount,
                purchase_type="fragment"
            )

            if purchase_result["status"] == "failed":
                error_msg = purchase_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
                error_type = await self.error_handler.handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self.error_handler.show_error_with_suggestions(
                    message_or_callback,
                    error_type,
                    {"user_id": user_id, "amount": amount}
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            stars_count = purchase_result.get("stars_count", 0)
            fragment_result = purchase_result.get("result", {})

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="purchase_history"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")
            )

            success_message = (
                f"üéâ <b>–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ Fragment —É—Å–ø–µ—à–Ω–∞!</b> üéâ\n\n"
                f"‚≠ê <b>–ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥:</b> {stars_count}\n"
                f"üßæ <b>–°—Ç–∞—Ç—É—Å:</b> {fragment_result.get('status', 'completed')}\n\n"
                f"üåü <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</i> üåü\n\n"
                f"‚ú® –í–∞—à–∏ –∑–≤–µ–∑–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            )

            if message:
                try:
                    if is_callback:
                        await message.edit_text(
                            success_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            success_message,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                except Exception as e:
                    self.logger.error(f"Error editing/answering message in buy_stars_with_fragment success case: {e}")
                    await message.answer(
                        success_message,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )

        except Exception as e:
            self.logger.error(f"Error creating star purchase with Fragment for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_type = await self.error_handler.handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self.error_handler.show_error_with_suggestions(
                message_or_callback,
                error_type,
                {"user_id": user_id, "amount": amount, "error": str(e)}
            )

    async def handle_message(self, message: Message, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        
        Args:
            message: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥
        if message.text and ("–∑–≤–µ–∑–¥" in message.text.lower() or "stars" in message.text.lower()):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            if message.text.isdigit():
                amount = int(message.text)
                if 1 <= amount <= 10000:
                    await self.buy_stars_custom(message, bot, amount)
                else:
                    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 10000")
        else:
            await message.answer("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b> ‚ùì\n\n"
                               "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</i>\n\n"
                               "üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>",
                               parse_mode="HTML")

    async def handle_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è –≤—Å–µ—Ö callback –æ–ø–µ—Ä–∞—Ü–∏–π
        user_id = callback.from_user.id
        if not await self.check_rate_limit(user_id, "operation", 20, 60):
            self.logger.warning(f"Rate limit exceeded for user {user_id} in purchase handler")
            await self._show_rate_limit_message(callback, "operation")
            return
            
        if callback.data == "buy_stars":
            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É/–∫–æ—à–µ–ª–µ–∫
            await self._show_buy_stars_menu(callback, bot, payment_type="card")
        elif callback.data == "buy_stars_balance":
            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫ —Å –±–∞–ª–∞–Ω—Å–∞
            await self._show_buy_stars_menu(callback, bot, payment_type="balance")
        elif callback.data == "buy_stars_fragment":
            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫ —á–µ—Ä–µ–∑ Fragment API
            await self._show_buy_stars_menu(callback, bot, payment_type="fragment")
        elif callback.data in ["buy_100", "buy_250", "buy_500", "buy_1000"]:
            amount = int(callback.data.replace("buy_", ""))
            await self.buy_stars_preset(callback, bot, amount)
        elif callback.data in ["buy_100_balance", "buy_250_balance", "buy_500_balance", "buy_1000_balance"]:
            amount = int(callback.data.replace("buy_", "").replace("_balance", ""))
            await self.buy_stars_with_balance(callback, bot, amount)
        elif callback.data in ["buy_100_fragment", "buy_250_fragment", "buy_500_fragment", "buy_1000_fragment"]:
            amount = int(callback.data.replace("buy_", "").replace("_fragment", ""))
            await self.buy_stars_with_fragment(callback, bot, amount)
        elif callback.data.startswith("check_payment_"):
            payment_id = callback.data.replace("check_payment_", "")
            # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            await callback.answer(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        elif callback.data == "back_to_buy_stars":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫
            from handlers.message_handler import MessageHandler
            await callback.message.edit_text(
                "‚≠ê <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥</b> ‚≠ê\n\n"
                "üéØ <i>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</i>\n\n"
                f"üí≥ <i>–ö–∞—Ä—Ç–æ–π/–ö–æ—à–µ–ª—å–∫–æ–º - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Heleket</i>\n"
                f"üí∞ <i>–° –±–∞–ª–∞–Ω—Å–∞ - —Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ —Å—á–µ—Ç–∞</i>\n"
                f"üíé <i>–ß–µ—Ä–µ–∑ Fragment - –ø—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞</i>\n\n"
                f"‚ú® <i>–ö–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ –∏–º–µ–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å!</i>",
                reply_markup=InlineKeyboardBuilder().row(
                    InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–æ–π/–ö–æ—à–µ–ª—å–∫–æ–º", callback_data="buy_stars"),
                    InlineKeyboardButton(text="üí∞ –° –±–∞–ª–∞–Ω—Å–∞", callback_data="buy_stars_balance")
                ).row(
                    InlineKeyboardButton(text="üíé –ß–µ—Ä–µ–∑ Fragment", callback_data="buy_stars_fragment")
                ).row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ).as_markup(),
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> ‚ùì\n\n"
                               "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</i>\n\n"
                               "üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>",
                               show_alert=True)

    async def _show_rate_limit_message(self, message_or_callback: Union[Message, CallbackQuery], limit_type: str) -> None:
        """
        –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ rate limit –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            limit_type: –¢–∏–ø –ª–∏–º–∏—Ç–∞
        """
        try:
            user_id = message_or_callback.from_user.id
            remaining_time = await self.get_rate_limit_remaining_time(user_id, limit_type)
            
            if isinstance(message_or_callback, Message):
                rate_limit_message = RateLimitMessages.get_rate_limit_message(limit_type, remaining_time, for_callback=False)
                await message_or_callback.answer(rate_limit_message, parse_mode="HTML")
            elif isinstance(message_or_callback, CallbackQuery):
                rate_limit_message = RateLimitMessages.get_rate_limit_message(limit_type, remaining_time, for_callback=True)
                await message_or_callback.answer(rate_limit_message, show_alert=True)
                
        except Exception as e:
            self.logger.error(f"Error showing rate limit message: {e}")

    async def _handle_insufficient_balance_error(self, message_or_callback, user_id: int, required_amount: int, current_balance: float, required_balance: float) -> None:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            required_amount: –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
            current_balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            required_balance: –¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        from utils.message_templates import MessageTemplate
        
        missing_amount = max(0, required_balance - current_balance)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        insufficient_balance_message = MessageTemplate.get_insufficient_balance_message(
            current_balance=current_balance,
            required_amount=required_amount,
            missing_amount=missing_amount
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Å—É–º–º—É (–æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö)
        recharge_amount = int(missing_amount) + 1 if missing_amount % 1 > 0 else int(missing_amount)
        builder.row(
            InlineKeyboardButton(
                text=f"üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ {recharge_amount} TON", 
                callback_data=f"recharge_{recharge_amount}"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
        if required_amount > 100:
            builder.row(
                InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å 100 –∑–≤–µ–∑–¥", callback_data="buy_100"),
                InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å 50 –∑–≤–µ–∑–¥", callback_data="buy_50")
            )
        elif required_amount > 50:
            builder.row(
                InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å 50 –∑–≤–µ–∑–¥", callback_data="buy_50"),
                InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å 25 –∑–≤–µ–∑–¥", callback_data="buy_25")
            )
        elif required_amount > 25:
            builder.row(
                InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å 25 –∑–≤–µ–∑–¥", callback_data="buy_25"),
                InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å 10 –∑–≤–µ–∑–¥", callback_data="buy_10")
            )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        builder.row(
            InlineKeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="balance_history")
        )
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if isinstance(message_or_callback, CallbackQuery) and message_or_callback.message:
                await message_or_callback.message.edit_text(
                    insufficient_balance_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
            else:
                message = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback
                if message:
                    await message.answer(
                        insufficient_balance_message,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
        except Exception as e:
            self.logger.error(f"Error showing insufficient balance message: {e}")
            # Fallback - –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            fallback_message = (
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {current_balance:.2f} TON\n"
                f"‚≠ê –ù—É–∂–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {required_amount} –∑–≤–µ–∑–¥: {required_balance:.2f} TON\n"
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing_amount:.2f} TON\n\n"
                f"üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥"
            )
            if isinstance(message_or_callback, CallbackQuery):
                await message_or_callback.answer(fallback_message, show_alert=True)
            else:
                await message_or_callback.answer(fallback_message)