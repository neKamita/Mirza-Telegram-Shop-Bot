"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
from typing import Dict, Any, Optional, Union
from datetime import datetime

from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from .base_handler import BaseHandler
from .error_handler import ErrorHandler
from utils.message_templates import MessageTemplate
from utils.rate_limit_messages import RateLimitMessages


class PaymentHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    """

    def __init__(self, *args, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        """
        super().__init__(*args, **kwargs)
        self.logger = logging.getLogger(__name__)
        self.error_handler = ErrorHandler(*args, **kwargs)

    def _format_payment_status(self, status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MessageTemplate"""
        return MessageTemplate._format_status(status)

    async def show_recharge_menu(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: Optional[float] = None) -> None:
        """
        –ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
        else:
            user_id = message_or_callback.from_user.id
            
        await self.safe_execute(
            user_id=user_id,
            operation="create_recharge",
            func=self._create_recharge_impl,
            message_or_callback=message_or_callback,
            bot=bot,
            amount=amount
        )

    # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ _create_recharge_impl —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞:
    # - show_recharge_menu: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º
    # - create_recharge: —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π

    async def check_recharge_status(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, payment_id: Optional[str] = None) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
        else:
            user_id = message_or_callback.from_user.id
            
        await self.safe_execute(
            user_id=user_id,
            operation="check_recharge_status",
            func=self._check_recharge_status_impl,
            message_or_callback=message_or_callback,
            bot=bot,
            payment_id=payment_id
        )

    async def _check_recharge_status_impl(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, payment_id: Optional[str] = None) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            return

        user_id = message_or_callback.from_user.id
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback
        
        # –ï—Å–ª–∏ payment_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback
        if not payment_id and isinstance(message_or_callback, CallbackQuery):
            payment_id = message_or_callback.data.replace("check_recharge_", "")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            status_result = await self.star_purchase_service.check_recharge_status(payment_id)

            if status_result.get("status") == "failed":
                error_msg = status_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
                error_type = await self.error_handler.handle_purchase_error(Exception(error_msg), {"user_id": user_id, "payment_id": payment_id})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self.error_handler.show_error_with_suggestions(
                    message_or_callback,
                    error_type,
                    {"user_id": user_id, "payment_id": payment_id, "error": error_msg}
                )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            payment_status = status_result.get("status", "unknown")
            amount = status_result.get("amount", 0)
            currency = status_result.get("currency", "TON")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if payment_status == "paid":
                status_message = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω."
                status_color = "‚úÖ"
                # –î–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                show_refresh_button = False
            elif payment_status == "pending":
                status_message = "‚è≥ –û–ø–ª–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
                status_color = "‚è≥"
                show_refresh_button = True
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                import asyncio
                await asyncio.sleep(10)
                await self.check_recharge_status(message_or_callback, bot, payment_id)
                return
            elif payment_status == "failed":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
                status_color = "‚ùå"
                show_refresh_button = True
            elif payment_status == "cancelled":
                status_message = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                status_color = "‚ùå"
                show_refresh_button = True
            else:
                status_message = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
                status_color = "‚ùì"
                show_refresh_button = True

            builder = InlineKeyboardBuilder()
            if show_refresh_button:
                builder.row(
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"check_recharge_{payment_id}"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cancel_recharge_{payment_id}")
                )
            else:
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cancel_recharge_{payment_id}")
                )

            if message:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    existing_text = message.text or ""
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
                    lines = existing_text.split('\n')
                    new_lines = []
                    status_found = False
                    
                    for line in lines:
                        if '—Å—Ç–∞—Ç—É—Å:' in line.lower():
                            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
                            current_time = datetime.now().strftime("%H:%M:%S")
                            new_status = f"‚è≥ <b>—Å—Ç–∞—Ç—É—Å: pending ({current_time})</b>"
                            new_lines.append(new_status)
                            status_found = True
                        else:
                            new_lines.append(line)
                    
                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
                    if not status_found:
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ—Å–ª–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
                        for i, line in enumerate(new_lines):
                            if 'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:' in line or 'ID –ø–ª–∞—Ç–µ–∂–∞:' in line:
                                new_lines.insert(i + 1, "")
                                current_time = datetime.now().strftime("%H:%M:%S")
                                new_status = f"‚è≥ <b>—Å—Ç–∞—Ç—É—Å: pending ({current_time})</b>"
                                new_lines.insert(i + 2, new_status)
                                break
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                            new_lines.append("")
                            current_time = datetime.now().strftime("%H:%M:%S")
                            new_status = f"‚è≥ <b>—Å—Ç–∞—Ç—É—Å: pending ({current_time})</b>"
                            new_lines.append(new_status)
                    
                    updated_text = '\n'.join(new_lines)
                    
                    if is_callback:
                        await message.edit_text(
                            updated_text,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            updated_text,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                except Exception as e:
                    self.logger.error(f"Error editing/answering message in check_recharge_status success case: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    pass

        except Exception as e:
            self.logger.error(f"Error checking recharge status for {payment_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_type = await self.error_handler.handle_purchase_error(e, {"user_id": user_id, "payment_id": payment_id})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self.error_handler.show_error_with_suggestions(
                message_or_callback,
                error_type,
                {"user_id": user_id, "payment_id": payment_id, "error": str(e)}
            )

    async def create_recharge(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: float) -> None:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
        else:
            user_id = message_or_callback.from_user.id
            
        await self.safe_execute(
            user_id=user_id,
            operation="create_recharge",
            func=self._create_recharge_impl,
            message_or_callback=message_or_callback,
            bot=bot,
            amount=amount
        )

    async def _create_recharge_impl(self, message_or_callback: Union[Message, CallbackQuery], bot: Bot, amount: float) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            amount: –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not message_or_callback.from_user or not message_or_callback.from_user.id:
            return

        user_id = message_or_callback.from_user.id
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            recharge_result = await self.star_purchase_service.create_recharge(user_id, amount)

            if recharge_result["status"] == "failed":
                error_msg = recharge_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
                error_type = await self.error_handler.handle_purchase_error(Exception(error_msg), {"user_id": user_id, "amount": amount})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                await self.error_handler.show_error_with_suggestions(
                    message_or_callback,
                    error_type,
                    {"user_id": user_id, "amount": amount, "error": error_msg}
                )
                return

            result = recharge_result.get("result", {})
            transaction_id = recharge_result.get("transaction_id")

            if not result or "uuid" not in result or "url" not in result:
                if message:
                    try:
                        if is_callback:
                            await message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                        else:
                            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                    except Exception as e:
                        self.logger.error(f"Error editing/answering message in handle_recharge_amount data error case: {e}")
                        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_recharge_{result['uuid']}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"cancel_recharge_{result['uuid']}"
                )
            )

            if message:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    status_line = self._format_payment_status("pending")
                    
                    if is_callback:
                        await message.edit_text(
                            f"‚úÖ <b>–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} TON</b> ‚úÖ\n\n"
                            f"üí≥ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> {result['url']}\n\n"
                            f"üìã <b>ID —Å—á–µ—Ç–∞:</b> {result['uuid']}\n"
                            f"üî¢ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction_id}\n"
                            f"{status_line}\n\n"
                            f"üîó <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>\n"
                            f"‚è∞ <i>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            f"‚úÖ <b>–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} TON</b> ‚úÖ\n\n"
                            f"üí≥ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> {result['url']}\n\n"
                            f"üìã <b>ID —Å—á–µ—Ç–∞:</b> {result['uuid']}\n"
                            f"üî¢ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction_id}\n"
                            f"{status_line}\n\n"
                            f"üîó <i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>\n"
                            f"‚è∞ <i>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                except Exception as e:
                    self.logger.error(f"Error editing/answering message in handle_recharge_amount success case: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
                    status_line = self._format_payment_status("pending")
                    await message.answer(
                        f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} TON.\n\n"
                        f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {result['url']}\n\n"
                        f"üìã ID —Å—á–µ—Ç–∞: {result['uuid']}\n"
                        f"üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}\n"
                        f"{status_line}",
                        reply_markup=builder.as_markup()
                    )

        except Exception as e:
            self.logger.error(f"Error creating recharge for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_type = await self.error_handler.handle_purchase_error(e, {"user_id": user_id, "amount": amount})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self.error_handler.show_error_with_suggestions(
                message_or_callback,
                error_type,
                {"user_id": user_id, "amount": amount, "error": str(e)}
            )

    async def cancel_specific_recharge(self, callback: CallbackQuery, bot: Bot, payment_id: str) -> None:
        """
        –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_execute
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            payment_id: UUID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        """
        user_id = callback.from_user.id
        
        await self.safe_execute(
            user_id=user_id,
            operation="cancel_recharge",
            func=self._cancel_specific_recharge_impl,
            callback=callback,
            bot=bot,
            payment_id=payment_id
        )

    async def _cancel_specific_recharge_impl(self, callback: CallbackQuery, bot: Bot, payment_id: str) -> None:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            payment_id: UUID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        """
        if not callback.from_user or not callback.from_user.id:
            return

        user_id = callback.from_user.id

        try:
            # –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–≤–æ–π—Å
            success = await self.star_purchase_service.cancel_specific_recharge(user_id, payment_id)
            
            if success:
                self.logger.info(f"Successfully cancelled recharge {payment_id} for user {user_id}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(text="üí∞ 10 TON", callback_data="recharge_10"),
                    InlineKeyboardButton(text="üí∞ 50 TON", callback_data="recharge_50")
                )
                builder.row(
                    InlineKeyboardButton(text="üí∞ 100 TON", callback_data="recharge_100"),
                    InlineKeyboardButton(text="üí∞ 500 TON", callback_data="recharge_500")
                )
                builder.row(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                )
                
                try:
                    if callback.message:
                        await callback.message.edit_text(
                            "‚ùå <b>–ò–Ω–≤–æ–π—Å –æ—Ç–º–µ–Ω–µ–Ω</b> ‚ùå\n\n"
                            "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b> üí≥\n\n"
                            "üéØ <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</i>\n\n"
                            f"üí∞ <i>10 TON - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                            f"üí∞ <i>50 TON - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                            f"üí∞ <i>100 TON - –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                            f"üí∞ <i>500 TON - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n\n"
                            f"‚ú® <i>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å —Å—É–º–º—É</i>",
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                    else:
                        await callback.answer("‚ùå –ò–Ω–≤–æ–π—Å –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
                except Exception as e:
                    self.logger.error(f"Error editing message after cancelling recharge: {e}")
                    await callback.answer("‚ùå –ò–Ω–≤–æ–π—Å –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            else:
                # –ò–Ω–≤–æ–π—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –Ω–µ pending)
                await callback.answer("‚ÑπÔ∏è –ò–Ω–≤–æ–π—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        except Exception as e:
            self.logger.error(f"Error cancelling specific recharge {payment_id} for user {user_id}: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
            error_type = await self.error_handler.handle_purchase_error(e, {"user_id": user_id, "payment_id": payment_id})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            await self.error_handler.show_error_with_suggestions(
                callback,
                error_type,
                {"user_id": user_id, "payment_id": payment_id, "error": str(e)}
            )

    async def handle_message(self, message: Message, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        
        Args:
            message: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
        if message.text and ("–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" in message.text.lower() or "recharge" in message.text.lower()):
            await self.create_recharge(message, bot)
        else:
            await message.answer("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b> ‚ùì\n\n"
                               "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</i>\n\n"
                               "üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>",
                               parse_mode="HTML")

    async def handle_callback(self, callback: CallbackQuery, bot: Bot) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è –≤—Å–µ—Ö callback –æ–ø–µ—Ä–∞—Ü–∏–π
        user_id = callback.from_user.id
        if not await self.check_rate_limit(user_id, "operation", 20, 60):
            self.logger.warning(f"Rate limit exceeded for user {user_id} in payment handler")
            await self._show_rate_limit_message(callback, "operation")
            return
            
        if callback.data == "recharge":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üí∞ 10 TON", callback_data="recharge_10"),
                InlineKeyboardButton(text="üí∞ 50 TON", callback_data="recharge_50")
            )
            builder.row(
                InlineKeyboardButton(text="üí∞ 100 TON", callback_data="recharge_100"),
                InlineKeyboardButton(text="üí∞ 500 TON", callback_data="recharge_500")
            )
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            
            try:
                if callback.message:
                    await callback.message.edit_text(
                        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b> üí≥\n\n"
                        "üéØ <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</i>\n\n"
                        f"üí∞ <i>10 TON - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                        f"üí∞ <i>50 TON - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                        f"üí∞ <i>100 TON - –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                        f"üí∞ <i>500 TON - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n\n"
                        f"‚ú® <i>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å —Å—É–º–º—É</i>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                else:
                    await callback.answer("‚ùå <b>–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b> ‚ùì", show_alert=True)
            except Exception as e:
                self.logger.error(f"Error showing recharge menu: {e}")
                await callback.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é</b> ‚ùì", show_alert=True)
        elif callback.data.startswith("check_recharge_"):
            payment_id = callback.data.replace("check_recharge_", "")
            await self.check_recharge_status(callback, bot, payment_id)
        elif callback.data.startswith("cancel_recharge_"):
            payment_id = callback.data.replace("cancel_recharge_", "")
            await self.cancel_specific_recharge(callback, bot, payment_id)
        elif callback.data in ["recharge_10", "recharge_50", "recharge_100", "recharge_500"]:
            amount = float(callback.data.replace("recharge_", ""))
            await self.create_recharge(callback, bot, amount)
        elif callback.data == "back_to_recharge":
            await self.create_recharge(callback, bot)
        elif callback.data == "recharge_custom":
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ pending –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
            try:
                cancelled_count = await self.star_purchase_service.cancel_pending_recharges(user_id)
                if cancelled_count > 0:
                    self.logger.info(f"Cancelled {cancelled_count} pending recharge(s) for user {user_id} on back button")
            except Exception as e:
                self.logger.error(f"Error cancelling pending recharges for user {user_id}: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üí∞ 10 TON", callback_data="recharge_10"),
                InlineKeyboardButton(text="üí∞ 50 TON", callback_data="recharge_50")
            )
            builder.row(
                InlineKeyboardButton(text="üí∞ 100 TON", callback_data="recharge_100"),
                InlineKeyboardButton(text="üí∞ 500 TON", callback_data="recharge_500")
            )
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            
            try:
                if callback.message:
                    await callback.message.edit_text(
                        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b> üí≥\n\n"
                        "üéØ <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</i>\n\n"
                        f"üí∞ <i>10 TON - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                        f"üí∞ <i>50 TON - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                        f"üí∞ <i>100 TON - –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n"
                        f"üí∞ <i>500 TON - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</i>\n\n"
                        f"‚ú® <i>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å —Å—É–º–º—É</i>",
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                else:
                    await callback.answer("‚ùå <b>–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b> ‚ùì", show_alert=True)
            except Exception as e:
                self.logger.error(f"Error showing recharge menu from recharge_custom: {e}")
                await callback.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é</b> ‚ùì", show_alert=True)
        else:
            await callback.answer("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> ‚ùì\n\n"
                               "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</i>\n\n"
                               "üí° <i>–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</i>",
                               show_alert=True)

    async def _show_rate_limit_message(self, message_or_callback: Union[Message, CallbackQuery], limit_type: str) -> None:
        """
        –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ rate limit –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            limit_type: –¢–∏–ø –ª–∏–º–∏—Ç–∞
        """
        try:
            user_id = message_or_callback.from_user.id
            remaining_time = await self.get_rate_limit_remaining_time(user_id, limit_type)
            
            if isinstance(message_or_callback, Message):
                rate_limit_message = RateLimitMessages.get_rate_limit_message(limit_type, remaining_time, for_callback=False)
                await message_or_callback.answer(rate_limit_message, parse_mode="HTML")
            elif isinstance(message_or_callback, CallbackQuery):
                rate_limit_message = RateLimitMessages.get_rate_limit_message(limit_type, remaining_time, for_callback=True)
                await message_or_callback.answer(rate_limit_message, show_alert=True)
                
        except Exception as e:
            self.logger.error(f"Error showing rate limit message: {e}")