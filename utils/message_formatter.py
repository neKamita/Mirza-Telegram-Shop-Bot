"""
MessageFormatter –∫–ª–∞—Å—Å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π.
"""
import re
import html
from typing import Dict, Any, Optional, Union, List
from datetime import datetime, timezone
from decimal import Decimal, InvalidOperation

from utils.message_templates import MessageTemplate


class MessageFormatter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –ø–ª–∞—Ç–µ–∂–µ–π, –ø–æ–∫—É–ø–æ–∫,
    –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∞ —Ç–∞–∫–∂–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
    –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID, DRY, KISS –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
    """

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    MAX_AMOUNT = 1000000.0
    MIN_AMOUNT = 0.01
    MAX_TEXT_LENGTH = 4096
    CURRENCY_SYMBOLS = {'TON', 'USD', 'EUR', 'RUB', 'KZT'}
    
    # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    AMOUNT_PATTERN = r'^\d+(\.\d{1,2})?$'
    TIMESTAMP_PATTERN = r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:\d{2})?$'
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageFormatter"""
        self.logger = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–≥–µ—Ä–æ–º

    def format_balance(self, balance_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
        
        Args:
            balance_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±–∞–ª–∞–Ω—Å–µ
                - balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                - currency: –í–∞–ª—é—Ç–∞
                - source: –ò—Å—Ç–æ—á–Ω–∏–∫ –±–∞–ª–∞–Ω—Å–∞
                - transactions_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - last_transaction: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self.validate_amount(balance_data.get('balance', 0)):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å")
                
            balance = float(balance_data.get('balance', 0))
            currency = balance_data.get('currency', 'TON')
            source = balance_data.get('source', 'unknown')
            transactions_count = balance_data.get('transactions_count', 0)
            last_transaction = balance_data.get('last_transaction', {})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"{MessageTemplate.EMOJI_BALANCE} <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b> {MessageTemplate.EMOJI_BALANCE}\n\n"
                f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {self.format_amount(balance, currency)}\n"
                f"üìä <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {self.sanitize_text(source)}</i>\n"
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
            if transactions_count > 0:
                message += f"üìà <i>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_count}</i>\n"
                
                if last_transaction:
                    last_amount = last_transaction.get('amount', 0)
                    last_type = last_transaction.get('type', 'unknown')
                    last_status = last_transaction.get('status', 'unknown')
                    last_date = last_transaction.get('created_at', '')
                    
                    if last_date:
                        formatted_date = self.format_timestamp(last_date)
                        message += f"üîÑ <i>–ü–æ—Å–ª–µ–¥–Ω—è—è: {self._format_transaction_type(last_type)} "
                        message += f"{self.format_amount(abs(last_amount), currency)} - "
                        message += f"{self._format_transaction_status(last_status)} {formatted_date}</i>\n"
            
            message += f"\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞!</i>\n"
            message += f"üíé <i>–ö–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ –∏–º–µ–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å!</i>"
            
            return self._validate_message_length(message)
            
        except Exception as e:
            self._log_error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return self._format_error_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å")

    def format_payment(self, payment_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö.
        
        Args:
            payment_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
                - amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
                - currency: –í–∞–ª—é—Ç–∞
                - status: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                - payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
                - created_at: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                - description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self.validate_amount(payment_data.get('amount', 0)):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
                
            amount = float(payment_data.get('amount', 0))
            currency = payment_data.get('currency', 'TON')
            status = payment_data.get('status', 'unknown')
            payment_id = payment_data.get('payment_id', '')
            created_at = payment_data.get('created_at', '')
            description = payment_data.get('description', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_line = self._format_payment_status(status)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"{status_line}\n"
            message += f"üí∞ <b>–°—É–º–º–∞:</b> {self.format_amount(amount, currency)}\n"
            
            if payment_id:
                message += f"üî¢ <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {self.sanitize_text(payment_id)}\n"
                
            if created_at:
                formatted_date = self.format_timestamp(created_at)
                message += f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
                
            if description:
                message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {self.sanitize_text(description)}\n"
            
            return self._validate_message_length(message)
            
        except Exception as e:
            self._log_error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return self._format_error_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ")

    def format_purchase(self, purchase_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–∞—Ö.
        
        Args:
            purchase_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–∫—É–ø–∫–µ
                - stars_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
                - amount: –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
                - currency: –í–∞–ª—é—Ç–∞
                - status: –°—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
                - purchase_id: ID –ø–æ–∫—É–ø–∫–∏
                - created_at: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                - payment_method: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            stars_count = int(purchase_data.get('stars_count', 0))
            if stars_count <= 0:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥")
                
            amount = float(purchase_data.get('amount', 0))
            if not self.validate_amount(amount):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏")
                
            currency = purchase_data.get('currency', 'TON')
            status = purchase_data.get('status', 'unknown')
            purchase_id = purchase_data.get('purchase_id', '')
            created_at = purchase_data.get('created_at', '')
            payment_method = purchase_data.get('payment_method', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_line = self._format_payment_status(status)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"{MessageTemplate.EMOJI_STAR} <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥</b> {MessageTemplate.EMOJI_STAR}\n\n"
                f"{status_line}\n"
                f"‚≠ê <b>–ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥:</b> {stars_count}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {self.format_amount(amount, currency)}\n"
            )
            
            if purchase_id:
                message += f"üî¢ <b>ID –ø–æ–∫—É–ø–∫–∏:</b> {self.sanitize_text(purchase_id)}\n"
                
            if created_at:
                formatted_date = self.format_timestamp(created_at)
                message += f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
                
            if payment_method:
                message += f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {self.sanitize_text(payment_method)}\n"
            
            message += f"\nüåü <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</i> üåü\n"
            message += f"‚ú® –í–∞—à–∏ –∑–≤–µ–∑–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            
            return self._validate_message_length(message)
            
        except Exception as e:
            self._log_error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: {e}")
            return self._format_error_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ")

    def format_transaction_history(self, history_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
        
        Args:
            history_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏–∏
                - initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                - final_balance: –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
                - transactions_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                - period: –ü–µ—Ä–∏–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            initial_balance = float(history_data.get('initial_balance', 0))
            final_balance = float(history_data.get('final_balance', 0))
            transactions_count = int(history_data.get('transactions_count', 0))
            period = history_data.get('period', '')
            transactions = history_data.get('transactions', [])
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            message = (
                f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b> üìä\n\n"
                f"üí∞ <b>–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {self.format_amount(initial_balance, 'TON')}\n"
                f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {self.format_amount(final_balance, 'TON')}\n"
                f"üìà <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {transactions_count}\n"
            )
            
            if period:
                message += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {self.sanitize_text(period)}\n"
            
            message += f"\nüîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            for i, transaction in enumerate(transactions[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                try:
                    transaction_type = transaction.get('type', 'unknown')
                    amount = float(transaction.get('amount', 0))
                    status = transaction.get('status', 'unknown')
                    created_at = transaction.get('created_at', '')
                    description = transaction.get('description', '')
                    
                    if created_at:
                        formatted_date = self.format_timestamp(created_at)
                    else:
                        formatted_date = "N/A"
                    
